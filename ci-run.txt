test-windows (introspection,net)
failed 1 minute ago in 1m 28s
Search logs
2s
Current runner version: '2.328.0'
Runner Image Provisioner
Operating System
Runner Image
GITHUB_TOKEN Permissions
Secret source: Actions
Prepare workflow directory
Prepare all required actions
Getting action download info
Download action repository 'actions/checkout@v4' (SHA:08eba0b27e820071cde6df949e0beb9ba4906955)
Download action repository 'dtolnay/rust-toolchain@stable' (SHA:5d458579430fc14a04a08a1e7d3694f545e91ce6)
Complete job name: test-windows (introspection,net)
13s
Run actions/checkout@v4
Syncing repository: cpjet64/rappct
Getting Git version info
Temporarily overriding HOME='D:\a\_temp\d119ee98-bd5c-44d7-af4b-30f6b2929980' before making global git config changes
Adding repository directory to the temporary git global config as a safe directory
"C:\Program Files\Git\bin\git.exe" config --global --add safe.directory D:\a\rappct\rappct
Deleting the contents of 'D:\a\rappct\rappct'
Initializing the repository
Disabling automatic garbage collection
Setting up auth
Fetching the repository
Determining the checkout info
"C:\Program Files\Git\bin\git.exe" sparse-checkout disable
"C:\Program Files\Git\bin\git.exe" config --local --unset-all extensions.worktreeConfig
Checking out the ref
"C:\Program Files\Git\bin\git.exe" log -1 --format=%H
c53b3d4a48a8b9018e9e06a6c24fadb161b503aa
13s
Run dtolnay/rust-toolchain@stable
Run : parse toolchain version
Run : construct rustup command line
Run : set $CARGO_HOME
Run : install rustup if needed on windows
Run rustup toolchain install stable --profile minimal --no-self-update
info: syncing channel updates for 'stable-x86_64-pc-windows-msvc'
info: latest update on 2025-09-18, rust version 1.90.0 (1159e78c4 2025-09-14)
info: downloading component 'cargo'
info: downloading component 'rust-std'
info: downloading component 'rustc'
info: installing component 'cargo'
info: installing component 'rust-std'
info: installing component 'rustc'

  stable-x86_64-pc-windows-msvc installed - rustc 1.90.0 (1159e78c4 2025-09-14)

Run rustup default stable
info: using existing install for 'stable-x86_64-pc-windows-msvc'
info: default toolchain set to 'stable-x86_64-pc-windows-msvc'

  stable-x86_64-pc-windows-msvc unchanged - rustc 1.90.0 (1159e78c4 2025-09-14)

Run : create cachekey
Run : disable incremental compilation
Run : enable colors in Cargo output
Run : enable Cargo sparse registry
Run : work around spurious network errors in curl 8.0
Run rustc +stable --version --verbose
rustc 1.90.0 (1159e78c4 2025-09-14)
binary: rustc
commit-hash: 1159e78c4747b02ef996e55082b704c09b970588
commit-date: 2025-09-14
host: x86_64-pc-windows-msvc
release: 1.90.0
LLVM version: 20.1.8
11s
Run rustc -Vv && cargo -V
rustc 1.90.0 (1159e78c4 2025-09-14)
binary: rustc
commit-hash: 1159e78c4747b02ef996e55082b704c09b970588
commit-date: 2025-09-14
host: x86_64-pc-windows-msvc
release: 1.90.0
LLVM version: 20.1.8
cargo 1.90.0 (840b83a10 2025-07-30)
46s
Run if [[ "introspection,net" == "" ]]; then
    Updating crates.io index
 Downloading crates ...
  Downloaded cfg-if v1.0.3
  Downloaded itoa v1.0.15
  Downloaded windows-result v0.3.4
  Downloaded windows-targets v0.53.4
  Downloaded windows-strings v0.3.1
  Downloaded unicode-ident v1.0.19
  Downloaded serde_core v1.0.228
  Downloaded ryu v1.0.20
  Downloaded tempfile v3.23.0
  Downloaded syn v2.0.106
  Downloaded windows-core v0.60.1
  Downloaded windows-collections v0.1.1
  Downloaded windows_x86_64_msvc v0.53.0
  Downloaded thiserror v1.0.69
  Downloaded serde v1.0.228
  Downloaded memchr v2.7.6
  Downloaded strsim v0.11.1
  Downloaded serde_json v1.0.145
  Downloaded clap_builder v4.5.48
  Downloaded fastrand v2.3.0
  Downloaded windows-link v0.2.0
  Downloaded windows-link v0.1.3
  Downloaded windows-implement v0.59.0
  Downloaded thiserror-impl v1.0.69
  Downloaded serde_derive v1.0.228
  Downloaded quote v1.0.41
  Downloaded once_cell_polyfill v1.70.1
  Downloaded getrandom v0.3.3
  Downloaded anstyle-query v1.1.4
  Downloaded windows-numerics v0.1.1
  Downloaded windows-interface v0.59.2
  Downloaded windows-future v0.1.1
  Downloaded utf8parse v0.2.2
  Downloaded proc-macro2 v1.0.101
  Downloaded once_cell v1.21.3
  Downloaded clap_derive v4.5.47
  Downloaded anstyle-wincon v3.0.10
  Downloaded anstyle-parse v0.2.7
  Downloaded anstyle v1.0.11
  Downloaded is_terminal_polyfill v1.70.1
  Downloaded heck v0.5.0
  Downloaded colorchoice v1.0.4
  Downloaded clap_lex v0.7.5
  Downloaded clap v4.5.48
  Downloaded anstream v0.6.20
  Downloaded windows-sys v0.61.1
  Downloaded windows-sys v0.60.2
  Downloaded windows v0.60.0
   Compiling proc-macro2 v1.0.101
   Compiling quote v1.0.41
   Compiling unicode-ident v1.0.19
   Compiling windows_x86_64_msvc v0.53.0
   Compiling windows-link v0.1.3
   Compiling windows-targets v0.53.4
   Compiling windows-strings v0.3.1
   Compiling windows-result v0.3.4
   Compiling syn v2.0.106
   Compiling windows-sys v0.60.2
   Compiling serde_core v1.0.228
   Compiling once_cell_polyfill v1.70.1
   Compiling anstyle v1.0.11
   Compiling utf8parse v0.2.2
   Compiling anstyle-parse v0.2.7
   Compiling anstyle-wincon v3.0.10
   Compiling anstyle-query v1.1.4
   Compiling getrandom v0.3.3
   Compiling colorchoice v1.0.4
   Compiling is_terminal_polyfill v1.70.1
   Compiling thiserror v1.0.69
   Compiling strsim v0.11.1
   Compiling anstream v0.6.20
   Compiling windows-interface v0.59.2
   Compiling windows-implement v0.59.0
   Compiling windows-core v0.60.1
   Compiling windows-collections v0.1.1
   Compiling windows-numerics v0.1.1
   Compiling windows-future v0.1.1
   Compiling thiserror-impl v1.0.69
   Compiling clap_lex v0.7.5
   Compiling serde_json v1.0.145
   Compiling heck v0.5.0
   Compiling windows-link v0.2.0
   Compiling serde v1.0.228
   Compiling cfg-if v1.0.3
   Compiling windows-sys v0.61.1
   Compiling clap_derive v4.5.47
   Compiling clap_builder v4.5.48
   Compiling windows v0.60.0
   Compiling serde_derive v1.0.228
   Compiling once_cell v1.21.3
   Compiling memchr v2.7.6
   Compiling fastrand v2.3.0
   Compiling ryu v1.0.20
   Compiling itoa v1.0.15
   Compiling tempfile v3.23.0
   Compiling clap v4.5.48
   Compiling rappct v0.9.0 (D:\a\rappct\rappct)
error[E0308]: mismatched types
   --> src\net.rs:271:16
    |
270 |         vec.retain(|sa| match EqualSid(sa.Sid, target) {
    |                               ------------------------ this expression has type `std::result::Result<(), windows_result::error::Error>`
271 |             Ok(true) => false,
    |                ^^^^ expected `()`, found `bool`

error[E0133]: call to unsafe function `windows::Win32::Security::Authorization::ConvertStringSidToSidW` is unsafe and requires unsafe block
   --> src\launch\mod.rs:183:12
    |
183 |         if ConvertStringSidToSidW(PCWSTR(pkg_w.as_ptr()), &mut pkg_psid_raw).is_err() {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src\launch\mod.rs:164:5
    |
164 |     unsafe fn new(sec: &SecurityCapabilities, handle_list: Option<Vec<HANDLE>>) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: `-D unsafe-op-in-unsafe-fn` implied by `-D warnings`
    = help: to override `-D warnings` add `#[allow(unsafe_op_in_unsafe_fn)]`

error[E0133]: call to unsafe function `util::win::LocalFreeGuard::<T>::new` is unsafe and requires unsafe block
   --> src\launch\mod.rs:190:33
    |
190 |         let package_sid_guard = LocalFreeGuard::<std::ffi::c_void>::new(pkg_psid_raw.0);
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Security::Authorization::ConvertStringSidToSidW` is unsafe and requires unsafe block
   --> src\launch\mod.rs:199:16
    |
199 |             if ConvertStringSidToSidW(PCWSTR(sddl_w.as_ptr()), &mut psid_raw).is_err() {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `util::win::LocalFreeGuard::<T>::new` is unsafe and requires unsafe block
   --> src\launch\mod.rs:206:25
    |
206 |             let guard = LocalFreeGuard::<std::ffi::c_void>::new(psid_raw.0);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::mem::zeroed` is unsafe and requires unsafe block
   --> src\launch\mod.rs:244:41
    |
244 |         let mut si_ex: STARTUPINFOEXW = std::mem::zeroed();
    |                                         ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::System::Threading::UpdateProcThreadAttribute` is unsafe and requires unsafe block
   --> src\launch\mod.rs:248:19
    |
248 |           let res = UpdateProcThreadAttribute(
    |  ___________________^
249 | |             si_ex.lpAttributeList,
250 | |             0,
251 | |             PROC_THREAD_ATTRIBUTE_SECURITY_CAPABILITIES as usize,
...   |
255 | |             None,
256 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::System::Threading::UpdateProcThreadAttribute` is unsafe and requires unsafe block
   --> src\launch\mod.rs:281:23
    |
281 |               let res = UpdateProcThreadAttribute(
    |  _______________________^
282 | |                 si_ex.lpAttributeList,
283 | |                 0,
284 | |                 PROC_THREAD_ATTRIBUTE_ALL_APPLICATION_PACKAGES_POLICY as usize,
...   |
290 | |                 None,
291 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::System::Threading::UpdateProcThreadAttribute` is unsafe and requires unsafe block
   --> src\launch\mod.rs:318:23
    |
318 |               let res = UpdateProcThreadAttribute(
    |  _______________________^
319 | |                 si_ex.lpAttributeList,
320 | |                 0,
321 | |                 PROC_THREAD_ATTRIBUTE_HANDLE_LIST as usize,
...   |
325 | |                 None,
326 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `launch::make_cmd_args` is unsafe and requires unsafe block
   --> src\launch\mod.rs:397:22
    |
397 |     let mut args_w = make_cmd_args(&opts.cmdline);
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src\launch\mod.rs:387:1
    |
387 | unsafe fn launch_impl(sec: &SecurityCapabilities, opts: &LaunchOptions) -> Result<LaunchedIo> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `std::mem::zeroed` is unsafe and requires unsafe block
   --> src\launch\mod.rs:401:37
    |
401 |     let mut si_ex: STARTUPINFOEXW = std::mem::zeroed();
    |                                     ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::mem::zeroed` is unsafe and requires unsafe block
   --> src\launch\mod.rs:415:47
    |
415 |             let mut sa: SECURITY_ATTRIBUTES = std::mem::zeroed();
    |                                               ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Storage::FileSystem::CreateFileW` is unsafe and requires unsafe block
   --> src\launch\mod.rs:419:24
    |
419 |               let h_in = CreateFileW(
    |  ________________________^
420 | |                 PCWSTR(nul.as_ptr()),
421 | |                 FILE_GENERIC_READ.0,
422 | |                 FILE_SHARE_READ | FILE_SHARE_WRITE,
...   |
426 | |                 None,
427 | |             )
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Storage::FileSystem::CreateFileW` is unsafe and requires unsafe block
   --> src\launch\mod.rs:433:25
    |
433 |               let h_out = CreateFileW(
    |  _________________________^
434 | |                 PCWSTR(nul.as_ptr()),
435 | |                 FILE_GENERIC_WRITE.0,
436 | |                 FILE_SHARE_READ | FILE_SHARE_WRITE,
...   |
440 | |                 None,
441 | |             )
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Storage::FileSystem::CreateFileW` is unsafe and requires unsafe block
   --> src\launch\mod.rs:447:25
    |
447 |               let h_err = CreateFileW(
    |  _________________________^
448 | |                 PCWSTR(nul.as_ptr()),
449 | |                 FILE_GENERIC_WRITE.0,
450 | |                 FILE_SHARE_READ | FILE_SHARE_WRITE,
...   |
454 | |                 None,
455 | |             )
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::mem::zeroed` is unsafe and requires unsafe block
   --> src\launch\mod.rs:468:47
    |
468 |             let mut sa: SECURITY_ATTRIBUTES = std::mem::zeroed();
    |                                               ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::System::Pipes::CreatePipe` is unsafe and requires unsafe block
   --> src\launch\mod.rs:472:13
    |
472 |             CreatePipe(&mut r_in, &mut w_in, Some(&sa), 0).map_err(|_| AcError::LaunchFailed {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::System::Pipes::CreatePipe` is unsafe and requires unsafe block
   --> src\launch\mod.rs:478:13
    |
478 |             CreatePipe(&mut r_out, &mut w_out, Some(&sa), 0).map_err(|_| {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::System::Pipes::CreatePipe` is unsafe and requires unsafe block
   --> src\launch\mod.rs:486:13
    |
486 |             CreatePipe(&mut r_err, &mut w_err, Some(&sa), 0).map_err(|_| {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Foundation::SetHandleInformation` is unsafe and requires unsafe block
   --> src\launch\mod.rs:494:21
    |
494 |               let _ = SetHandleInformation(
    |  _____________________^
495 | |                 w_in,
496 | |                 HANDLE_FLAG_INHERIT.0,
497 | |                 windows::Win32::Foundation::HANDLE_FLAGS(0),
498 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Foundation::SetHandleInformation` is unsafe and requires unsafe block
   --> src\launch\mod.rs:499:21
    |
499 |               let _ = SetHandleInformation(
    |  _____________________^
500 | |                 r_out,
501 | |                 HANDLE_FLAG_INHERIT.0,
502 | |                 windows::Win32::Foundation::HANDLE_FLAGS(0),
503 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Foundation::SetHandleInformation` is unsafe and requires unsafe block
   --> src\launch\mod.rs:504:21
    |
504 |               let _ = SetHandleInformation(
    |  _____________________^
505 | |                 r_err,
506 | |                 HANDLE_FLAG_INHERIT.0,
507 | |                 windows::Win32::Foundation::HANDLE_FLAGS(0),
508 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `launch::AttributeContext::new` is unsafe and requires unsafe block
   --> src\launch\mod.rs:530:24
    |
530 |     let mut attr_ctx = AttributeContext::new(sec, handles_for_attr)?;
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::mem::zeroed` is unsafe and requires unsafe block
   --> src\launch\mod.rs:534:39
    |
534 |     let mut pi: PROCESS_INFORMATION = std::mem::zeroed();
    |                                       ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::System::Threading::CreateProcessW` is unsafe and requires unsafe block
   --> src\launch\mod.rs:557:14
    |
557 |       let ok = CreateProcessW(
    |  ______________^
558 | |         PCWSTR(exe_w.as_ptr()),
559 | |         args_w.as_mut().map(|v| PWSTR(v.as_mut_ptr())),
560 | |         None,
...   |
572 | |         &mut pi,
573 | |     )
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Foundation::CloseHandle` is unsafe and requires unsafe block
   --> src\launch\mod.rs:586:25
    |
586 |                 let _ = CloseHandle(child_stdin);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Foundation::CloseHandle` is unsafe and requires unsafe block
   --> src\launch\mod.rs:589:25
    |
589 |                 let _ = CloseHandle(child_stdout);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Foundation::CloseHandle` is unsafe and requires unsafe block
   --> src\launch\mod.rs:592:25
    |
592 |                 let _ = CloseHandle(child_stderr);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Foundation::CloseHandle` is unsafe and requires unsafe block
   --> src\launch\mod.rs:607:21
    |
607 |             let _ = CloseHandle(child_stdin);
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Foundation::CloseHandle` is unsafe and requires unsafe block
   --> src\launch\mod.rs:610:21
    |
610 |             let _ = CloseHandle(child_stdout);
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Foundation::CloseHandle` is unsafe and requires unsafe block
   --> src\launch\mod.rs:613:21
    |
613 |             let _ = CloseHandle(child_stderr);
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::System::JobObjects::CreateJobObjectW` is unsafe and requires unsafe block
   --> src\launch\mod.rs:620:20
    |
620 |         let hjob = CreateJobObjectW(None, PCWSTR::null())
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::mem::zeroed` is unsafe and requires unsafe block
   --> src\launch\mod.rs:623:66
    |
623 |             let mut info: JOBOBJECT_EXTENDED_LIMIT_INFORMATION = std::mem::zeroed();
    |                                                                  ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::System::JobObjects::SetInformationJobObject` is unsafe and requires unsafe block
   --> src\launch\mod.rs:631:13
    |
631 | /             SetInformationJobObject(
632 | |                 hjob,
633 | |                 JobObjectExtendedLimitInformation,
634 | |                 &info as *const _ as *const _,
635 | |                 std::mem::size_of::<JOBOBJECT_EXTENDED_LIMIT_INFORMATION>() as u32,
636 | |             )
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::mem::zeroed` is unsafe and requires unsafe block
   --> src\launch\mod.rs:644:68
    |
644 |             let mut info: JOBOBJECT_CPU_RATE_CONTROL_INFORMATION = std::mem::zeroed();
    |                                                                    ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::System::JobObjects::SetInformationJobObject` is unsafe and requires unsafe block
   --> src\launch\mod.rs:648:13
    |
648 | /             SetInformationJobObject(
649 | |                 hjob,
650 | |                 JobObjectCpuRateControlInformation,
651 | |                 &info as *const _ as *const _,
652 | |                 std::mem::size_of::<JOBOBJECT_CPU_RATE_CONTROL_INFORMATION>() as u32,
653 | |             )
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::System::JobObjects::AssignProcessToJobObject` is unsafe and requires unsafe block
   --> src\launch\mod.rs:660:9
    |
660 |         AssignProcessToJobObject(hjob, pi.hProcess).map_err(|_| AcError::LaunchFailed {
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Foundation::CloseHandle` is unsafe and requires unsafe block
   --> src\launch\mod.rs:668:21
    |
668 |             let _ = CloseHandle(hjob);
    |                     ^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Foundation::CloseHandle` is unsafe and requires unsafe block
   --> src\launch\mod.rs:672:13
    |
672 |     let _ = CloseHandle(pi.hThread);
    |             ^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src\net.rs:23:11
   |
23 |     while *ptr.0.add(len) != 0 {
   |           ^^^^^^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
  --> src\net.rs:18:1
   |
18 | unsafe fn pwstr_to_string(ptr: PWSTR) -> String {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::add` is unsafe and requires unsafe block
  --> src\net.rs:23:12
   |
23 |     while *ptr.0.add(len) != 0 {
   |            ^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::slice::from_raw_parts` is unsafe and requires unsafe block
  --> src\net.rs:26:30
   |
26 |     String::from_utf16_lossy(std::slice::from_raw_parts(ptr.0, len))
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Security::Authorization::ConvertSidToStringSidW` is unsafe and requires unsafe block
  --> src\net.rs:33:5
   |
33 |     ConvertSidToStringSidW(psid, &mut raw)
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
  --> src\net.rs:30:1
   |
30 | unsafe fn psid_to_string(psid: PSID) -> Result<String> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `util::win::LocalFreeGuard::<T>::new` is unsafe and requires unsafe block
  --> src\net.rs:35:17
   |
35 |     let guard = LocalFreeGuard::<u16>::new(raw.0);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Security::GetTokenInformation` is unsafe and requires unsafe block
  --> src\token.rs:84:11
   |
84 |       match GetTokenInformation(
   |  ___________^
85 | |         token,
86 | |         class,
87 | |         Some((&mut value) as *mut _ as *mut _),
88 | |         std::mem::size_of::<u32>() as u32,
89 | |         &mut retlen,
90 | |     ) {
   | |_____^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
  --> src\token.rs:81:1
   |
81 | unsafe fn query_bool(token: HANDLE, class: TOKEN_INFORMATION_CLASS) -> Result<bool> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `windows::Win32::Security::GetTokenInformation` is unsafe and requires unsafe block
   --> src\token.rs:108:23
    |
108 |     if let Err(err) = GetTokenInformation(token, TokenAppContainerSid, None, 0, &mut needed) {
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src\token.rs:106:1
    |
106 | unsafe fn query_appcontainer_sid(token: HANDLE) -> Result<Option<AppContainerSid>> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `windows::Win32::Security::GetTokenInformation` is unsafe and requires unsafe block
   --> src\token.rs:123:5
    |
123 | /     GetTokenInformation(
124 | |         token,
125 | |         TokenAppContainerSid,
126 | |         Some(buffer.as_mut_ptr() as *mut _),
127 | |         needed,
128 | |         &mut needed,
129 | |     )
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src\token.rs:138:15
    |
138 |     let sid = (*info_ptr).TokenAppContainer;
    |               ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `token::sid_to_string` is unsafe and requires unsafe block
   --> src\token.rs:142:22
    |
142 |     let sid_string = sid_to_string(sid)?;
    |                      ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Security::GetTokenInformation` is unsafe and requires unsafe block
   --> src\token.rs:149:23
    |
149 |     if let Err(err) = GetTokenInformation(token, TokenCapabilities, None, 0, &mut needed) {
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src\token.rs:147:1
    |
147 | unsafe fn query_capabilities(token: HANDLE) -> Result<Vec<String>> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `windows::Win32::Security::GetTokenInformation` is unsafe and requires unsafe block
   --> src\token.rs:164:5
    |
164 | /     GetTokenInformation(
165 | |         token,
166 | |         TokenCapabilities,
167 | |         Some(buffer.as_mut_ptr() as *mut _),
168 | |         needed,
169 | |         &mut needed,
170 | |     )
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src\token.rs:179:17
    |
179 |     let count = (*groups).GroupCount as usize;
    |                 ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::slice::from_raw_parts` is unsafe and requires unsafe block
   --> src\token.rs:184:17
    |
184 |     let slice = std::slice::from_raw_parts((*groups).Groups.as_ptr(), count);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src\token.rs:184:44
    |
184 |     let slice = std::slice::from_raw_parts((*groups).Groups.as_ptr(), count);
    |                                            ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `token::sid_to_string` is unsafe and requires unsafe block
   --> src\token.rs:189:23
    |
189 |         let sid_str = sid_to_string(entry.Sid)?;
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Security::Authorization::ConvertSidToStringSidW` is unsafe and requires unsafe block
   --> src\token.rs:203:5
    |
203 |     ConvertSidToStringSidW(psid, &mut out)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src\token.rs:196:1
    |
196 | unsafe fn sid_to_string(psid: windows::Win32::Security::PSID) -> Result<String> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `util::win::LocalFreeGuard::<T>::new` is unsafe and requires unsafe block
   --> src\token.rs:205:17
    |
205 |     let guard = LocalFreeGuard::<u16>::new(out.0);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src\util.rs:104:19
    |
104 |             while *self.ptr.add(len) != 0 {
    |                   ^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src\util.rs:99:9
    |
 99 |         pub unsafe fn to_string_lossy(&self) -> String {
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::add` is unsafe and requires unsafe block
   --> src\util.rs:104:20
    |
104 |             while *self.ptr.add(len) != 0 {
    |                    ^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::slice::from_raw_parts` is unsafe and requires unsafe block
   --> src\util.rs:107:25
    |
107 |             let slice = std::slice::from_raw_parts(self.ptr, len);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

Some errors have detailed explanations: E0133, E0308.
For more information about an error, try `rustc --explain E0133`.
error: could not compile `rappct` (lib) due to 60 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `rappct` (lib test) due to 60 previous errors
Error: Process completed with exit code 101.
2s
Post job cleanup.
"C:\Program Files\Git\bin\git.exe" version
git version 2.51.0.windows.1
Temporarily overriding HOME='D:\a\_temp\90b9507f-c4cf-416d-a1c2-d8a5aef2a897' before making global git config changes
Adding repository directory to the temporary git global config as a safe directory
"C:\Program Files\Git\bin\git.exe" config --global --add safe.directory D:\a\rappct\rappct
"C:\Program Files\Git\bin\git.exe" config --local --name-only --get-regexp core\.sshCommand
"C:\Program Files\Git\bin\git.exe" submodule foreach --recursive "sh -c \"git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :\""
"C:\Program Files\Git\bin\git.exe" config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
http.https://github.com/.extraheader
"C:\Program Files\Git\bin\git.exe" config --local --unset-all http.https://github.com/.extraheader
"C:\Program Files\Git\bin\git.exe" submodule foreach --recursive "sh -c \"git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :\""
0s
Cleaning up orphan processes
Terminate orphan process: pid (5568) (vctip)


test-windows (net)
cancelled 1 minute ago in 1m 36s
Search logs
1s
Current runner version: '2.328.0'
Runner Image Provisioner
Operating System
Runner Image
GITHUB_TOKEN Permissions
Secret source: Actions
Prepare workflow directory
Prepare all required actions
Getting action download info
Download action repository 'actions/checkout@v4' (SHA:08eba0b27e820071cde6df949e0beb9ba4906955)
Download action repository 'dtolnay/rust-toolchain@stable' (SHA:5d458579430fc14a04a08a1e7d3694f545e91ce6)
Complete job name: test-windows (net)
6s
Run actions/checkout@v4
Syncing repository: cpjet64/rappct
Getting Git version info
Temporarily overriding HOME='D:\a\_temp\7311f36d-e4ff-4f00-ab2b-6b8991c443f9' before making global git config changes
Adding repository directory to the temporary git global config as a safe directory
"C:\Program Files\Git\bin\git.exe" config --global --add safe.directory D:\a\rappct\rappct
Deleting the contents of 'D:\a\rappct\rappct'
Initializing the repository
Disabling automatic garbage collection
Setting up auth
Fetching the repository
Determining the checkout info
"C:\Program Files\Git\bin\git.exe" sparse-checkout disable
"C:\Program Files\Git\bin\git.exe" config --local --unset-all extensions.worktreeConfig
Checking out the ref
"C:\Program Files\Git\bin\git.exe" log -1 --format=%H
c53b3d4a48a8b9018e9e06a6c24fadb161b503aa
18s
Run dtolnay/rust-toolchain@stable
Run : parse toolchain version
Run : construct rustup command line
Run : set $CARGO_HOME
Run : install rustup if needed on windows
Run rustup toolchain install stable --profile minimal --no-self-update
info: syncing channel updates for 'stable-x86_64-pc-windows-msvc'
info: latest update on 2025-09-18, rust version 1.90.0 (1159e78c4 2025-09-14)
info: downloading component 'cargo'
info: downloading component 'rust-std'
info: downloading component 'rustc'
info: installing component 'cargo'
info: installing component 'rust-std'
info: installing component 'rustc'

  stable-x86_64-pc-windows-msvc installed - rustc 1.90.0 (1159e78c4 2025-09-14)

Run rustup default stable
info: using existing install for 'stable-x86_64-pc-windows-msvc'
info: default toolchain set to 'stable-x86_64-pc-windows-msvc'

  stable-x86_64-pc-windows-msvc unchanged - rustc 1.90.0 (1159e78c4 2025-09-14)

Run : create cachekey
Run : disable incremental compilation
Run : enable colors in Cargo output
Run : enable Cargo sparse registry
Run : work around spurious network errors in curl 8.0
Run rustc +stable --version --verbose
rustc 1.90.0 (1159e78c4 2025-09-14)
binary: rustc
commit-hash: 1159e78c4747b02ef996e55082b704c09b970588
commit-date: 2025-09-14
host: x86_64-pc-windows-msvc
release: 1.90.0
LLVM version: 20.1.8
15s
Run rustc -Vv && cargo -V
rustc 1.90.0 (1159e78c4 2025-09-14)
binary: rustc
commit-hash: 1159e78c4747b02ef996e55082b704c09b970588
commit-date: 2025-09-14
host: x86_64-pc-windows-msvc
release: 1.90.0
LLVM version: 20.1.8
cargo 1.90.0 (840b83a10 2025-07-30)
51s
Run if [[ "net" == "" ]]; then
    Updating crates.io index
 Downloading crates ...
  Downloaded anstyle-query v1.1.4
  Downloaded windows-link v0.2.0
  Downloaded windows-targets v0.53.4
  Downloaded windows-numerics v0.1.1
  Downloaded windows-result v0.3.4
  Downloaded proc-macro2 v1.0.101
  Downloaded serde_core v1.0.228
  Downloaded serde v1.0.228
  Downloaded syn v2.0.106
  Downloaded unicode-ident v1.0.19
  Downloaded tempfile v3.23.0
  Downloaded serde_derive v1.0.228
  Downloaded once_cell v1.21.3
  Downloaded heck v0.5.0
  Downloaded clap v4.5.48
  Downloaded windows-interface v0.59.2
  Downloaded windows-future v0.1.1
  Downloaded windows-collections v0.1.1
  Downloaded utf8parse v0.2.2
  Downloaded thiserror v1.0.69
  Downloaded memchr v2.7.6
  Downloaded itoa v1.0.15
  Downloaded colorchoice v1.0.4
  Downloaded clap_derive v4.5.47
  Downloaded serde_json v1.0.145
  Downloaded clap_builder v4.5.48
  Downloaded anstyle-parse v0.2.7
  Downloaded anstyle v1.0.11
  Downloaded windows-strings v0.3.1
  Downloaded windows-link v0.1.3
  Downloaded windows-core v0.60.1
  Downloaded strsim v0.11.1
  Downloaded quote v1.0.41
  Downloaded once_cell_polyfill v1.70.1
  Downloaded fastrand v2.3.0
  Downloaded cfg-if v1.0.3
  Downloaded anstyle-wincon v3.0.10
  Downloaded anstream v0.6.20
  Downloaded windows-implement v0.59.0
  Downloaded thiserror-impl v1.0.69
  Downloaded ryu v1.0.20
  Downloaded is_terminal_polyfill v1.70.1
  Downloaded getrandom v0.3.3
  Downloaded clap_lex v0.7.5
  Downloaded windows_x86_64_msvc v0.53.0
  Downloaded windows-sys v0.61.1
  Downloaded windows-sys v0.60.2
  Downloaded windows v0.60.0
   Compiling proc-macro2 v1.0.101
   Compiling quote v1.0.41
   Compiling unicode-ident v1.0.19
   Compiling windows_x86_64_msvc v0.53.0
   Compiling windows-link v0.1.3
   Compiling windows-targets v0.53.4
   Compiling windows-result v0.3.4
   Compiling windows-strings v0.3.1
   Compiling syn v2.0.106
   Compiling windows-sys v0.60.2
   Compiling serde_core v1.0.228
   Compiling once_cell_polyfill v1.70.1
   Compiling anstyle v1.0.11
   Compiling utf8parse v0.2.2
   Compiling anstyle-parse v0.2.7
   Compiling anstyle-wincon v3.0.10
   Compiling anstyle-query v1.1.4
   Compiling thiserror v1.0.69
   Compiling getrandom v0.3.3
   Compiling is_terminal_polyfill v1.70.1
   Compiling colorchoice v1.0.4
   Compiling anstream v0.6.20
   Compiling windows-implement v0.59.0
   Compiling windows-interface v0.59.2
   Compiling windows-core v0.60.1
   Compiling thiserror-impl v1.0.69
   Compiling windows-future v0.1.1
   Compiling windows-collections v0.1.1
   Compiling windows-numerics v0.1.1
   Compiling strsim v0.11.1
   Compiling serde_json v1.0.145
   Compiling serde v1.0.228
   Compiling cfg-if v1.0.3
   Compiling windows-link v0.2.0
   Compiling heck v0.5.0
   Compiling clap_lex v0.7.5
   Compiling clap_derive v4.5.47
   Compiling clap_builder v4.5.48
   Compiling windows-sys v0.61.1
   Compiling windows v0.60.0
   Compiling serde_derive v1.0.228
   Compiling memchr v2.7.6
   Compiling ryu v1.0.20
   Compiling itoa v1.0.15
   Compiling fastrand v2.3.0
   Compiling once_cell v1.21.3
   Compiling tempfile v3.23.0
   Compiling clap v4.5.48
   Compiling rappct v0.9.0 (D:\a\rappct\rappct)
error[E0308]: mismatched types
   --> src\net.rs:271:16
    |
270 |         vec.retain(|sa| match EqualSid(sa.Sid, target) {
    |                               ------------------------ this expression has type `std::result::Result<(), windows_result::error::Error>`
271 |             Ok(true) => false,
    |                ^^^^ expected `()`, found `bool`

error[E0133]: call to unsafe function `windows::Win32::Security::Authorization::ConvertStringSidToSidW` is unsafe and requires unsafe block
   --> src\launch\mod.rs:183:12
    |
183 |         if ConvertStringSidToSidW(PCWSTR(pkg_w.as_ptr()), &mut pkg_psid_raw).is_err() {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src\launch\mod.rs:164:5
    |
164 |     unsafe fn new(sec: &SecurityCapabilities, handle_list: Option<Vec<HANDLE>>) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: `-D unsafe-op-in-unsafe-fn` implied by `-D warnings`
    = help: to override `-D warnings` add `#[allow(unsafe_op_in_unsafe_fn)]`

error[E0133]: call to unsafe function `util::win::LocalFreeGuard::<T>::new` is unsafe and requires unsafe block
   --> src\launch\mod.rs:190:33
    |
190 |         let package_sid_guard = LocalFreeGuard::<std::ffi::c_void>::new(pkg_psid_raw.0);
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Security::Authorization::ConvertStringSidToSidW` is unsafe and requires unsafe block
   --> src\launch\mod.rs:199:16
    |
199 |             if ConvertStringSidToSidW(PCWSTR(sddl_w.as_ptr()), &mut psid_raw).is_err() {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `util::win::LocalFreeGuard::<T>::new` is unsafe and requires unsafe block
   --> src\launch\mod.rs:206:25
    |
206 |             let guard = LocalFreeGuard::<std::ffi::c_void>::new(psid_raw.0);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::mem::zeroed` is unsafe and requires unsafe block
   --> src\launch\mod.rs:244:41
    |
244 |         let mut si_ex: STARTUPINFOEXW = std::mem::zeroed();
    |                                         ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::System::Threading::UpdateProcThreadAttribute` is unsafe and requires unsafe block
   --> src\launch\mod.rs:248:19
    |
248 |           let res = UpdateProcThreadAttribute(
    |  ___________________^
249 | |             si_ex.lpAttributeList,
250 | |             0,
251 | |             PROC_THREAD_ATTRIBUTE_SECURITY_CAPABILITIES as usize,
...   |
255 | |             None,
256 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::System::Threading::UpdateProcThreadAttribute` is unsafe and requires unsafe block
   --> src\launch\mod.rs:281:23
    |
281 |               let res = UpdateProcThreadAttribute(
    |  _______________________^
282 | |                 si_ex.lpAttributeList,
283 | |                 0,
284 | |                 PROC_THREAD_ATTRIBUTE_ALL_APPLICATION_PACKAGES_POLICY as usize,
...   |
290 | |                 None,
291 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::System::Threading::UpdateProcThreadAttribute` is unsafe and requires unsafe block
   --> src\launch\mod.rs:318:23
    |
318 |               let res = UpdateProcThreadAttribute(
    |  _______________________^
319 | |                 si_ex.lpAttributeList,
320 | |                 0,
321 | |                 PROC_THREAD_ATTRIBUTE_HANDLE_LIST as usize,
...   |
325 | |                 None,
326 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `launch::make_cmd_args` is unsafe and requires unsafe block
   --> src\launch\mod.rs:397:22
    |
397 |     let mut args_w = make_cmd_args(&opts.cmdline);
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src\launch\mod.rs:387:1
    |
387 | unsafe fn launch_impl(sec: &SecurityCapabilities, opts: &LaunchOptions) -> Result<LaunchedIo> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `std::mem::zeroed` is unsafe and requires unsafe block
   --> src\launch\mod.rs:401:37
    |
401 |     let mut si_ex: STARTUPINFOEXW = std::mem::zeroed();
    |                                     ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::mem::zeroed` is unsafe and requires unsafe block
   --> src\launch\mod.rs:415:47
    |
415 |             let mut sa: SECURITY_ATTRIBUTES = std::mem::zeroed();
    |                                               ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Storage::FileSystem::CreateFileW` is unsafe and requires unsafe block
   --> src\launch\mod.rs:419:24
    |
419 |               let h_in = CreateFileW(
    |  ________________________^
420 | |                 PCWSTR(nul.as_ptr()),
421 | |                 FILE_GENERIC_READ.0,
422 | |                 FILE_SHARE_READ | FILE_SHARE_WRITE,
...   |
426 | |                 None,
427 | |             )
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Storage::FileSystem::CreateFileW` is unsafe and requires unsafe block
   --> src\launch\mod.rs:433:25
    |
433 |               let h_out = CreateFileW(
    |  _________________________^
434 | |                 PCWSTR(nul.as_ptr()),
435 | |                 FILE_GENERIC_WRITE.0,
436 | |                 FILE_SHARE_READ | FILE_SHARE_WRITE,
...   |
440 | |                 None,
441 | |             )
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Storage::FileSystem::CreateFileW` is unsafe and requires unsafe block
   --> src\launch\mod.rs:447:25
    |
447 |               let h_err = CreateFileW(
    |  _________________________^
448 | |                 PCWSTR(nul.as_ptr()),
449 | |                 FILE_GENERIC_WRITE.0,
450 | |                 FILE_SHARE_READ | FILE_SHARE_WRITE,
...   |
454 | |                 None,
455 | |             )
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::mem::zeroed` is unsafe and requires unsafe block
   --> src\launch\mod.rs:468:47
    |
468 |             let mut sa: SECURITY_ATTRIBUTES = std::mem::zeroed();
    |                                               ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::System::Pipes::CreatePipe` is unsafe and requires unsafe block
   --> src\launch\mod.rs:472:13
    |
472 |             CreatePipe(&mut r_in, &mut w_in, Some(&sa), 0).map_err(|_| AcError::LaunchFailed {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::System::Pipes::CreatePipe` is unsafe and requires unsafe block
   --> src\launch\mod.rs:478:13
    |
478 |             CreatePipe(&mut r_out, &mut w_out, Some(&sa), 0).map_err(|_| {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::System::Pipes::CreatePipe` is unsafe and requires unsafe block
   --> src\launch\mod.rs:486:13
    |
486 |             CreatePipe(&mut r_err, &mut w_err, Some(&sa), 0).map_err(|_| {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Foundation::SetHandleInformation` is unsafe and requires unsafe block
   --> src\launch\mod.rs:494:21
    |
494 |               let _ = SetHandleInformation(
    |  _____________________^
495 | |                 w_in,
496 | |                 HANDLE_FLAG_INHERIT.0,
497 | |                 windows::Win32::Foundation::HANDLE_FLAGS(0),
498 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Foundation::SetHandleInformation` is unsafe and requires unsafe block
   --> src\launch\mod.rs:499:21
    |
499 |               let _ = SetHandleInformation(
    |  _____________________^
500 | |                 r_out,
501 | |                 HANDLE_FLAG_INHERIT.0,
502 | |                 windows::Win32::Foundation::HANDLE_FLAGS(0),
503 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Foundation::SetHandleInformation` is unsafe and requires unsafe block
   --> src\launch\mod.rs:504:21
    |
504 |               let _ = SetHandleInformation(
    |  _____________________^
505 | |                 r_err,
506 | |                 HANDLE_FLAG_INHERIT.0,
507 | |                 windows::Win32::Foundation::HANDLE_FLAGS(0),
508 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `launch::AttributeContext::new` is unsafe and requires unsafe block
   --> src\launch\mod.rs:530:24
    |
530 |     let mut attr_ctx = AttributeContext::new(sec, handles_for_attr)?;
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::mem::zeroed` is unsafe and requires unsafe block
   --> src\launch\mod.rs:534:39
    |
534 |     let mut pi: PROCESS_INFORMATION = std::mem::zeroed();
    |                                       ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::System::Threading::CreateProcessW` is unsafe and requires unsafe block
   --> src\launch\mod.rs:557:14
    |
557 |       let ok = CreateProcessW(
    |  ______________^
558 | |         PCWSTR(exe_w.as_ptr()),
559 | |         args_w.as_mut().map(|v| PWSTR(v.as_mut_ptr())),
560 | |         None,
...   |
572 | |         &mut pi,
573 | |     )
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Foundation::CloseHandle` is unsafe and requires unsafe block
   --> src\launch\mod.rs:586:25
    |
586 |                 let _ = CloseHandle(child_stdin);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Foundation::CloseHandle` is unsafe and requires unsafe block
   --> src\launch\mod.rs:589:25
    |
589 |                 let _ = CloseHandle(child_stdout);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Foundation::CloseHandle` is unsafe and requires unsafe block
   --> src\launch\mod.rs:592:25
    |
592 |                 let _ = CloseHandle(child_stderr);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Foundation::CloseHandle` is unsafe and requires unsafe block
   --> src\launch\mod.rs:607:21
    |
607 |             let _ = CloseHandle(child_stdin);
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Foundation::CloseHandle` is unsafe and requires unsafe block
   --> src\launch\mod.rs:610:21
    |
610 |             let _ = CloseHandle(child_stdout);
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Foundation::CloseHandle` is unsafe and requires unsafe block
   --> src\launch\mod.rs:613:21
    |
613 |             let _ = CloseHandle(child_stderr);
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::System::JobObjects::CreateJobObjectW` is unsafe and requires unsafe block
   --> src\launch\mod.rs:620:20
    |
620 |         let hjob = CreateJobObjectW(None, PCWSTR::null())
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::mem::zeroed` is unsafe and requires unsafe block
   --> src\launch\mod.rs:623:66
    |
623 |             let mut info: JOBOBJECT_EXTENDED_LIMIT_INFORMATION = std::mem::zeroed();
    |                                                                  ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::System::JobObjects::SetInformationJobObject` is unsafe and requires unsafe block
   --> src\launch\mod.rs:631:13
    |
631 | /             SetInformationJobObject(
632 | |                 hjob,
633 | |                 JobObjectExtendedLimitInformation,
634 | |                 &info as *const _ as *const _,
635 | |                 std::mem::size_of::<JOBOBJECT_EXTENDED_LIMIT_INFORMATION>() as u32,
636 | |             )
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::mem::zeroed` is unsafe and requires unsafe block
   --> src\launch\mod.rs:644:68
    |
644 |             let mut info: JOBOBJECT_CPU_RATE_CONTROL_INFORMATION = std::mem::zeroed();
    |                                                                    ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::System::JobObjects::SetInformationJobObject` is unsafe and requires unsafe block
   --> src\launch\mod.rs:648:13
    |
648 | /             SetInformationJobObject(
649 | |                 hjob,
650 | |                 JobObjectCpuRateControlInformation,
651 | |                 &info as *const _ as *const _,
652 | |                 std::mem::size_of::<JOBOBJECT_CPU_RATE_CONTROL_INFORMATION>() as u32,
653 | |             )
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::System::JobObjects::AssignProcessToJobObject` is unsafe and requires unsafe block
   --> src\launch\mod.rs:660:9
    |
660 |         AssignProcessToJobObject(hjob, pi.hProcess).map_err(|_| AcError::LaunchFailed {
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Foundation::CloseHandle` is unsafe and requires unsafe block
   --> src\launch\mod.rs:668:21
    |
668 |             let _ = CloseHandle(hjob);
    |                     ^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Foundation::CloseHandle` is unsafe and requires unsafe block
   --> src\launch\mod.rs:672:13
    |
672 |     let _ = CloseHandle(pi.hThread);
    |             ^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src\net.rs:23:11
   |
23 |     while *ptr.0.add(len) != 0 {
   |           ^^^^^^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
  --> src\net.rs:18:1
   |
18 | unsafe fn pwstr_to_string(ptr: PWSTR) -> String {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::add` is unsafe and requires unsafe block
  --> src\net.rs:23:12
   |
23 |     while *ptr.0.add(len) != 0 {
   |            ^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::slice::from_raw_parts` is unsafe and requires unsafe block
  --> src\net.rs:26:30
   |
26 |     String::from_utf16_lossy(std::slice::from_raw_parts(ptr.0, len))
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Security::Authorization::ConvertSidToStringSidW` is unsafe and requires unsafe block
  --> src\net.rs:33:5
   |
33 |     ConvertSidToStringSidW(psid, &mut raw)
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
  --> src\net.rs:30:1
   |
30 | unsafe fn psid_to_string(psid: PSID) -> Result<String> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `util::win::LocalFreeGuard::<T>::new` is unsafe and requires unsafe block
  --> src\net.rs:35:17
   |
35 |     let guard = LocalFreeGuard::<u16>::new(raw.0);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Security::GetTokenInformation` is unsafe and requires unsafe block
  --> src\token.rs:84:11
   |
84 |       match GetTokenInformation(
   |  ___________^
85 | |         token,
86 | |         class,
87 | |         Some((&mut value) as *mut _ as *mut _),
88 | |         std::mem::size_of::<u32>() as u32,
89 | |         &mut retlen,
90 | |     ) {
   | |_____^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
  --> src\token.rs:81:1
   |
81 | unsafe fn query_bool(token: HANDLE, class: TOKEN_INFORMATION_CLASS) -> Result<bool> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `windows::Win32::Security::GetTokenInformation` is unsafe and requires unsafe block
   --> src\token.rs:108:23
    |
108 |     if let Err(err) = GetTokenInformation(token, TokenAppContainerSid, None, 0, &mut needed) {
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src\token.rs:106:1
    |
106 | unsafe fn query_appcontainer_sid(token: HANDLE) -> Result<Option<AppContainerSid>> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `windows::Win32::Security::GetTokenInformation` is unsafe and requires unsafe block
   --> src\token.rs:123:5
    |
123 | /     GetTokenInformation(
124 | |         token,
125 | |         TokenAppContainerSid,
126 | |         Some(buffer.as_mut_ptr() as *mut _),
127 | |         needed,
128 | |         &mut needed,
129 | |     )
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src\token.rs:138:15
    |
138 |     let sid = (*info_ptr).TokenAppContainer;
    |               ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `token::sid_to_string` is unsafe and requires unsafe block
   --> src\token.rs:142:22
    |
142 |     let sid_string = sid_to_string(sid)?;
    |                      ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Security::GetTokenInformation` is unsafe and requires unsafe block
   --> src\token.rs:149:23
    |
149 |     if let Err(err) = GetTokenInformation(token, TokenCapabilities, None, 0, &mut needed) {
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src\token.rs:147:1
    |
147 | unsafe fn query_capabilities(token: HANDLE) -> Result<Vec<String>> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `windows::Win32::Security::GetTokenInformation` is unsafe and requires unsafe block
   --> src\token.rs:164:5
    |
164 | /     GetTokenInformation(
165 | |         token,
166 | |         TokenCapabilities,
167 | |         Some(buffer.as_mut_ptr() as *mut _),
168 | |         needed,
169 | |         &mut needed,
170 | |     )
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src\token.rs:179:17
    |
179 |     let count = (*groups).GroupCount as usize;
    |                 ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::slice::from_raw_parts` is unsafe and requires unsafe block
   --> src\token.rs:184:17
    |
184 |     let slice = std::slice::from_raw_parts((*groups).Groups.as_ptr(), count);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src\token.rs:184:44
    |
184 |     let slice = std::slice::from_raw_parts((*groups).Groups.as_ptr(), count);
    |                                            ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `token::sid_to_string` is unsafe and requires unsafe block
   --> src\token.rs:189:23
    |
189 |         let sid_str = sid_to_string(entry.Sid)?;
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Security::Authorization::ConvertSidToStringSidW` is unsafe and requires unsafe block
   --> src\token.rs:203:5
    |
203 |     ConvertSidToStringSidW(psid, &mut out)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src\token.rs:196:1
    |
196 | unsafe fn sid_to_string(psid: windows::Win32::Security::PSID) -> Result<String> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `util::win::LocalFreeGuard::<T>::new` is unsafe and requires unsafe block
   --> src\token.rs:205:17
    |
205 |     let guard = LocalFreeGuard::<u16>::new(out.0);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src\util.rs:104:19
    |
104 |             while *self.ptr.add(len) != 0 {
    |                   ^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src\util.rs:99:9
    |
 99 |         pub unsafe fn to_string_lossy(&self) -> String {
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::add` is unsafe and requires unsafe block
   --> src\util.rs:104:20
    |
104 |             while *self.ptr.add(len) != 0 {
    |                    ^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::slice::from_raw_parts` is unsafe and requires unsafe block
   --> src\util.rs:107:25
    |
107 |             let slice = std::slice::from_raw_parts(self.ptr, len);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

Some errors have detailed explanations: E0133, E0308.
For more information about an error, try `rustc --explain E0133`.
error: could not compile `rappct` (lib) due to 60 previous errors
warning: build failed, waiting for other jobs to finish...
Error: The operation was canceled.
3s
Post job cleanup.
"C:\Program Files\Git\bin\git.exe" version
git version 2.51.0.windows.1
Temporarily overriding HOME='D:\a\_temp\ffa52a04-fe36-4cec-b752-8b68b9483236' before making global git config changes
Adding repository directory to the temporary git global config as a safe directory
"C:\Program Files\Git\bin\git.exe" config --global --add safe.directory D:\a\rappct\rappct
"C:\Program Files\Git\bin\git.exe" config --local --name-only --get-regexp core\.sshCommand
"C:\Program Files\Git\bin\git.exe" submodule foreach --recursive "sh -c \"git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :\""
"C:\Program Files\Git\bin\git.exe" config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
http.https://github.com/.extraheader
"C:\Program Files\Git\bin\git.exe" config --local --unset-all http.https://github.com/.extraheader
"C:\Program Files\Git\bin\git.exe" submodule foreach --recursive "sh -c \"git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :\""
0s
Cleaning up orphan processes
Terminate orphan process: pid (8372) (vctip)



test-windows (introspection)
cancelled 1 minute ago in 1m 47s
Search logs
1s
Current runner version: '2.328.0'
Runner Image Provisioner
Operating System
Runner Image
GITHUB_TOKEN Permissions
Secret source: Actions
Prepare workflow directory
Prepare all required actions
Getting action download info
Download action repository 'actions/checkout@v4' (SHA:08eba0b27e820071cde6df949e0beb9ba4906955)
Download action repository 'dtolnay/rust-toolchain@stable' (SHA:5d458579430fc14a04a08a1e7d3694f545e91ce6)
Complete job name: test-windows (introspection)
12s
Run actions/checkout@v4
Syncing repository: cpjet64/rappct
Getting Git version info
Temporarily overriding HOME='D:\a\_temp\004d6513-634c-439a-a1a5-d5c01c6248bd' before making global git config changes
Adding repository directory to the temporary git global config as a safe directory
"C:\Program Files\Git\bin\git.exe" config --global --add safe.directory D:\a\rappct\rappct
Deleting the contents of 'D:\a\rappct\rappct'
Initializing the repository
Disabling automatic garbage collection
Setting up auth
Fetching the repository
Determining the checkout info
"C:\Program Files\Git\bin\git.exe" sparse-checkout disable
"C:\Program Files\Git\bin\git.exe" config --local --unset-all extensions.worktreeConfig
Checking out the ref
"C:\Program Files\Git\bin\git.exe" log -1 --format=%H
c53b3d4a48a8b9018e9e06a6c24fadb161b503aa
25s
Run dtolnay/rust-toolchain@stable
Run : parse toolchain version
Run : construct rustup command line
Run : set $CARGO_HOME
Run : install rustup if needed on windows
Run rustup toolchain install stable --profile minimal --no-self-update
info: syncing channel updates for 'stable-x86_64-pc-windows-msvc'
info: latest update on 2025-09-18, rust version 1.90.0 (1159e78c4 2025-09-14)
info: downloading component 'cargo'
info: downloading component 'rust-std'
info: downloading component 'rustc'
info: installing component 'cargo'
info: installing component 'rust-std'
info: installing component 'rustc'

  stable-x86_64-pc-windows-msvc installed - rustc 1.90.0 (1159e78c4 2025-09-14)

Run rustup default stable
info: using existing install for 'stable-x86_64-pc-windows-msvc'
info: default toolchain set to 'stable-x86_64-pc-windows-msvc'

  stable-x86_64-pc-windows-msvc unchanged - rustc 1.90.0 (1159e78c4 2025-09-14)

Run : create cachekey
Run : disable incremental compilation
Run : enable colors in Cargo output
Run : enable Cargo sparse registry
Run : work around spurious network errors in curl 8.0
Run rustc +stable --version --verbose
rustc 1.90.0 (1159e78c4 2025-09-14)
binary: rustc
commit-hash: 1159e78c4747b02ef996e55082b704c09b970588
commit-date: 2025-09-14
host: x86_64-pc-windows-msvc
release: 1.90.0
LLVM version: 20.1.8
31s
Run rustc -Vv && cargo -V
rustc 1.90.0 (1159e78c4 2025-09-14)
binary: rustc
commit-hash: 1159e78c4747b02ef996e55082b704c09b970588
commit-date: 2025-09-14
host: x86_64-pc-windows-msvc
release: 1.90.0
LLVM version: 20.1.8
cargo 1.90.0 (840b83a10 2025-07-30)
24s
Run if [[ "introspection" == "" ]]; then
    Updating crates.io index
 Downloading crates ...
  Downloaded cfg-if v1.0.3
  Downloaded windows-targets v0.53.4
  Downloaded windows-numerics v0.1.1
  Downloaded windows-strings v0.3.1
  Downloaded tempfile v3.23.0
  Downloaded serde_derive v1.0.228
  Downloaded ryu v1.0.20
  Downloaded serde v1.0.228
  Downloaded getrandom v0.3.3
  Downloaded fastrand v2.3.0
  Downloaded memchr v2.7.6
  Downloaded serde_json v1.0.145
  Downloaded clap_builder v4.5.48
  Downloaded clap_derive v4.5.47
  Downloaded anstream v0.6.20
  Downloaded windows-result v0.3.4
  Downloaded windows-implement v0.59.0
  Downloaded syn v2.0.106
  Downloaded windows-future v0.1.1
  Downloaded utf8parse v0.2.2
  Downloaded thiserror v1.0.69
  Downloaded strsim v0.11.1
  Downloaded once_cell_polyfill v1.70.1
  Downloaded itoa v1.0.15
  Downloaded is_terminal_polyfill v1.70.1
  Downloaded heck v0.5.0
  Downloaded colorchoice v1.0.4
  Downloaded clap_lex v0.7.5
  Downloaded clap v4.5.48
  Downloaded windows-link v0.2.0
  Downloaded windows-link v0.1.3
  Downloaded windows-interface v0.59.2
  Downloaded windows-collections v0.1.1
  Downloaded unicode-ident v1.0.19
  Downloaded thiserror-impl v1.0.69
  Downloaded serde_core v1.0.228
  Downloaded windows-core v0.60.1
  Downloaded quote v1.0.41
  Downloaded proc-macro2 v1.0.101
  Downloaded once_cell v1.21.3
  Downloaded anstyle-wincon v3.0.10
  Downloaded anstyle-query v1.1.4
  Downloaded anstyle-parse v0.2.7
  Downloaded anstyle v1.0.11
  Downloaded windows_x86_64_msvc v0.53.0
  Downloaded windows-sys v0.61.1
  Downloaded windows-sys v0.60.2
  Downloaded windows v0.60.0
   Compiling proc-macro2 v1.0.101
   Compiling quote v1.0.41
Error: The operation was canceled.
9s
Post job cleanup.
"C:\Program Files\Git\bin\git.exe" version
git version 2.51.0.windows.1
Temporarily overriding HOME='D:\a\_temp\25936ecc-8f11-4e40-b8cf-05e070811ee9' before making global git config changes
Adding repository directory to the temporary git global config as a safe directory
"C:\Program Files\Git\bin\git.exe" config --global --add safe.directory D:\a\rappct\rappct
"C:\Program Files\Git\bin\git.exe" config --local --name-only --get-regexp core\.sshCommand
"C:\Program Files\Git\bin\git.exe" submodule foreach --recursive "sh -c \"git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :\""
"C:\Program Files\Git\bin\git.exe" config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
http.https://github.com/.extraheader
"C:\Program Files\Git\bin\git.exe" config --local --unset-all http.https://github.com/.extraheader
"C:\Program Files\Git\bin\git.exe" submodule foreach --recursive "sh -c \"git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :\""
1s
Cleaning up orphan processes



test-windows
cancelled 1 minute ago in 1m 41s
Search logs
2s
Current runner version: '2.328.0'
Runner Image Provisioner
Operating System
Runner Image
GITHUB_TOKEN Permissions
Secret source: Actions
Prepare workflow directory
Prepare all required actions
Getting action download info
Download action repository 'actions/checkout@v4' (SHA:08eba0b27e820071cde6df949e0beb9ba4906955)
Download action repository 'dtolnay/rust-toolchain@stable' (SHA:5d458579430fc14a04a08a1e7d3694f545e91ce6)
Complete job name: test-windows
7s
Run actions/checkout@v4
Syncing repository: cpjet64/rappct
Getting Git version info
Temporarily overriding HOME='D:\a\_temp\c5f93361-5239-4a74-8eca-b72ffd8c86f7' before making global git config changes
Adding repository directory to the temporary git global config as a safe directory
"C:\Program Files\Git\bin\git.exe" config --global --add safe.directory D:\a\rappct\rappct
Deleting the contents of 'D:\a\rappct\rappct'
Initializing the repository
Disabling automatic garbage collection
Setting up auth
Fetching the repository
Determining the checkout info
"C:\Program Files\Git\bin\git.exe" sparse-checkout disable
"C:\Program Files\Git\bin\git.exe" config --local --unset-all extensions.worktreeConfig
Checking out the ref
"C:\Program Files\Git\bin\git.exe" log -1 --format=%H
c53b3d4a48a8b9018e9e06a6c24fadb161b503aa
18s
Run dtolnay/rust-toolchain@stable
Run : parse toolchain version
Run : construct rustup command line
Run : set $CARGO_HOME
Run : install rustup if needed on windows
Run rustup toolchain install stable --profile minimal --no-self-update
info: syncing channel updates for 'stable-x86_64-pc-windows-msvc'
info: latest update on 2025-09-18, rust version 1.90.0 (1159e78c4 2025-09-14)
info: downloading component 'cargo'
info: downloading component 'rust-std'
info: downloading component 'rustc'
info: installing component 'cargo'
info: installing component 'rust-std'
info: installing component 'rustc'

  stable-x86_64-pc-windows-msvc installed - rustc 1.90.0 (1159e78c4 2025-09-14)

Run rustup default stable
info: using existing install for 'stable-x86_64-pc-windows-msvc'
info: default toolchain set to 'stable-x86_64-pc-windows-msvc'

  stable-x86_64-pc-windows-msvc unchanged - rustc 1.90.0 (1159e78c4 2025-09-14)

Run : create cachekey
Run : disable incremental compilation
Run : enable colors in Cargo output
Run : enable Cargo sparse registry
Run : work around spurious network errors in curl 8.0
Run rustc +stable --version --verbose
rustc 1.90.0 (1159e78c4 2025-09-14)
binary: rustc
commit-hash: 1159e78c4747b02ef996e55082b704c09b970588
commit-date: 2025-09-14
host: x86_64-pc-windows-msvc
release: 1.90.0
LLVM version: 20.1.8
12s
Run rustc -Vv && cargo -V
rustc 1.90.0 (1159e78c4 2025-09-14)
binary: rustc
commit-hash: 1159e78c4747b02ef996e55082b704c09b970588
commit-date: 2025-09-14
host: x86_64-pc-windows-msvc
release: 1.90.0
LLVM version: 20.1.8
cargo 1.90.0 (840b83a10 2025-07-30)
54s
Run if [[ "" == "" ]]; then
    Updating crates.io index
 Downloading crates ...
  Downloaded windows-interface v0.59.2
  Downloaded windows-targets v0.53.4
  Downloaded windows-strings v0.3.1
  Downloaded windows-implement v0.59.0
  Downloaded unicode-ident v1.0.19
  Downloaded serde_derive v1.0.228
  Downloaded memchr v2.7.6
  Downloaded serde_core v1.0.228
  Downloaded proc-macro2 v1.0.101
  Downloaded tempfile v3.23.0
  Downloaded serde_json v1.0.145
  Downloaded clap_builder v4.5.48
  Downloaded ryu v1.0.20
  Downloaded quote v1.0.41
  Downloaded once_cell v1.21.3
  Downloaded getrandom v0.3.3
  Downloaded windows-core v0.60.1
  Downloaded syn v2.0.106
  Downloaded windows-collections v0.1.1
  Downloaded thiserror-impl v1.0.69
  Downloaded heck v0.5.0
  Downloaded fastrand v2.3.0
  Downloaded colorchoice v1.0.4
  Downloaded clap_derive v4.5.47
  Downloaded clap v4.5.48
  Downloaded cfg-if v1.0.3
  Downloaded anstyle v1.0.11
  Downloaded anstream v0.6.20
  Downloaded windows-result v0.3.4
  Downloaded windows-numerics v0.1.1
  Downloaded windows-link v0.2.0
  Downloaded windows-future v0.1.1
  Downloaded utf8parse v0.2.2
  Downloaded thiserror v1.0.69
  Downloaded strsim v0.11.1
  Downloaded clap_lex v0.7.5
  Downloaded anstyle-wincon v3.0.10
  Downloaded anstyle-query v1.1.4
  Downloaded anstyle-parse v0.2.7
  Downloaded windows-link v0.1.3
  Downloaded serde v1.0.228
  Downloaded once_cell_polyfill v1.70.1
  Downloaded itoa v1.0.15
  Downloaded is_terminal_polyfill v1.70.1
  Downloaded windows_x86_64_msvc v0.53.0
  Downloaded windows-sys v0.60.2
  Downloaded windows-sys v0.61.1
  Downloaded windows v0.60.0
   Compiling proc-macro2 v1.0.101
   Compiling quote v1.0.41
   Compiling unicode-ident v1.0.19
   Compiling windows_x86_64_msvc v0.53.0
   Compiling windows-link v0.1.3
   Compiling windows-targets v0.53.4
   Compiling windows-strings v0.3.1
   Compiling windows-result v0.3.4
   Compiling syn v2.0.106
   Compiling windows-sys v0.60.2
   Compiling utf8parse v0.2.2
   Compiling once_cell_polyfill v1.70.1
   Compiling serde_core v1.0.228
   Compiling anstyle v1.0.11
   Compiling anstyle-wincon v3.0.10
   Compiling anstyle-parse v0.2.7
   Compiling anstyle-query v1.1.4
   Compiling colorchoice v1.0.4
   Compiling is_terminal_polyfill v1.70.1
   Compiling thiserror v1.0.69
   Compiling getrandom v0.3.3
   Compiling anstream v0.6.20
   Compiling windows-interface v0.59.2
   Compiling windows-implement v0.59.0
   Compiling windows-core v0.60.1
   Compiling thiserror-impl v1.0.69
   Compiling windows-collections v0.1.1
   Compiling windows-numerics v0.1.1
   Compiling windows-future v0.1.1
   Compiling heck v0.5.0
   Compiling strsim v0.11.1
   Compiling serde v1.0.228
   Compiling windows-link v0.2.0
   Compiling cfg-if v1.0.3
   Compiling serde_json v1.0.145
   Compiling clap_lex v0.7.5
   Compiling clap_builder v4.5.48
   Compiling windows-sys v0.61.1
   Compiling clap_derive v4.5.47
   Compiling windows v0.60.0
   Compiling serde_derive v1.0.228
   Compiling memchr v2.7.6
   Compiling itoa v1.0.15
   Compiling fastrand v2.3.0
   Compiling once_cell v1.21.3
   Compiling ryu v1.0.20
   Compiling tempfile v3.23.0
   Compiling clap v4.5.48
   Compiling rappct v0.9.0 (D:\a\rappct\rappct)
error[E0133]: call to unsafe function `windows::Win32::Security::Authorization::ConvertStringSidToSidW` is unsafe and requires unsafe block
   --> src\launch\mod.rs:183:12
    |
183 |         if ConvertStringSidToSidW(PCWSTR(pkg_w.as_ptr()), &mut pkg_psid_raw).is_err() {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src\launch\mod.rs:164:5
    |
164 |     unsafe fn new(sec: &SecurityCapabilities, handle_list: Option<Vec<HANDLE>>) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: `-D unsafe-op-in-unsafe-fn` implied by `-D warnings`
    = help: to override `-D warnings` add `#[allow(unsafe_op_in_unsafe_fn)]`

error[E0133]: call to unsafe function `util::win::LocalFreeGuard::<T>::new` is unsafe and requires unsafe block
   --> src\launch\mod.rs:190:33
    |
190 |         let package_sid_guard = LocalFreeGuard::<std::ffi::c_void>::new(pkg_psid_raw.0);
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Security::Authorization::ConvertStringSidToSidW` is unsafe and requires unsafe block
   --> src\launch\mod.rs:199:16
    |
199 |             if ConvertStringSidToSidW(PCWSTR(sddl_w.as_ptr()), &mut psid_raw).is_err() {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `util::win::LocalFreeGuard::<T>::new` is unsafe and requires unsafe block
   --> src\launch\mod.rs:206:25
    |
206 |             let guard = LocalFreeGuard::<std::ffi::c_void>::new(psid_raw.0);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::mem::zeroed` is unsafe and requires unsafe block
   --> src\launch\mod.rs:244:41
    |
244 |         let mut si_ex: STARTUPINFOEXW = std::mem::zeroed();
    |                                         ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::System::Threading::UpdateProcThreadAttribute` is unsafe and requires unsafe block
   --> src\launch\mod.rs:248:19
    |
248 |           let res = UpdateProcThreadAttribute(
    |  ___________________^
249 | |             si_ex.lpAttributeList,
250 | |             0,
251 | |             PROC_THREAD_ATTRIBUTE_SECURITY_CAPABILITIES as usize,
...   |
255 | |             None,
256 | |         );
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::System::Threading::UpdateProcThreadAttribute` is unsafe and requires unsafe block
   --> src\launch\mod.rs:281:23
    |
281 |               let res = UpdateProcThreadAttribute(
    |  _______________________^
282 | |                 si_ex.lpAttributeList,
283 | |                 0,
284 | |                 PROC_THREAD_ATTRIBUTE_ALL_APPLICATION_PACKAGES_POLICY as usize,
...   |
290 | |                 None,
291 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::System::Threading::UpdateProcThreadAttribute` is unsafe and requires unsafe block
   --> src\launch\mod.rs:318:23
    |
318 |               let res = UpdateProcThreadAttribute(
    |  _______________________^
319 | |                 si_ex.lpAttributeList,
320 | |                 0,
321 | |                 PROC_THREAD_ATTRIBUTE_HANDLE_LIST as usize,
...   |
325 | |                 None,
326 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `launch::make_cmd_args` is unsafe and requires unsafe block
   --> src\launch\mod.rs:397:22
    |
397 |     let mut args_w = make_cmd_args(&opts.cmdline);
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src\launch\mod.rs:387:1
    |
387 | unsafe fn launch_impl(sec: &SecurityCapabilities, opts: &LaunchOptions) -> Result<LaunchedIo> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `std::mem::zeroed` is unsafe and requires unsafe block
   --> src\launch\mod.rs:401:37
    |
401 |     let mut si_ex: STARTUPINFOEXW = std::mem::zeroed();
    |                                     ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::mem::zeroed` is unsafe and requires unsafe block
   --> src\launch\mod.rs:415:47
    |
415 |             let mut sa: SECURITY_ATTRIBUTES = std::mem::zeroed();
    |                                               ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Storage::FileSystem::CreateFileW` is unsafe and requires unsafe block
   --> src\launch\mod.rs:419:24
    |
419 |               let h_in = CreateFileW(
    |  ________________________^
420 | |                 PCWSTR(nul.as_ptr()),
421 | |                 FILE_GENERIC_READ.0,
422 | |                 FILE_SHARE_READ | FILE_SHARE_WRITE,
...   |
426 | |                 None,
427 | |             )
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Storage::FileSystem::CreateFileW` is unsafe and requires unsafe block
   --> src\launch\mod.rs:433:25
    |
433 |               let h_out = CreateFileW(
    |  _________________________^
434 | |                 PCWSTR(nul.as_ptr()),
435 | |                 FILE_GENERIC_WRITE.0,
436 | |                 FILE_SHARE_READ | FILE_SHARE_WRITE,
...   |
440 | |                 None,
441 | |             )
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Storage::FileSystem::CreateFileW` is unsafe and requires unsafe block
   --> src\launch\mod.rs:447:25
    |
447 |               let h_err = CreateFileW(
    |  _________________________^
448 | |                 PCWSTR(nul.as_ptr()),
449 | |                 FILE_GENERIC_WRITE.0,
450 | |                 FILE_SHARE_READ | FILE_SHARE_WRITE,
...   |
454 | |                 None,
455 | |             )
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::mem::zeroed` is unsafe and requires unsafe block
   --> src\launch\mod.rs:468:47
    |
468 |             let mut sa: SECURITY_ATTRIBUTES = std::mem::zeroed();
    |                                               ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::System::Pipes::CreatePipe` is unsafe and requires unsafe block
   --> src\launch\mod.rs:472:13
    |
472 |             CreatePipe(&mut r_in, &mut w_in, Some(&sa), 0).map_err(|_| AcError::LaunchFailed {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::System::Pipes::CreatePipe` is unsafe and requires unsafe block
   --> src\launch\mod.rs:478:13
    |
478 |             CreatePipe(&mut r_out, &mut w_out, Some(&sa), 0).map_err(|_| {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::System::Pipes::CreatePipe` is unsafe and requires unsafe block
   --> src\launch\mod.rs:486:13
    |
486 |             CreatePipe(&mut r_err, &mut w_err, Some(&sa), 0).map_err(|_| {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Foundation::SetHandleInformation` is unsafe and requires unsafe block
   --> src\launch\mod.rs:494:21
    |
494 |               let _ = SetHandleInformation(
    |  _____________________^
495 | |                 w_in,
496 | |                 HANDLE_FLAG_INHERIT.0,
497 | |                 windows::Win32::Foundation::HANDLE_FLAGS(0),
498 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Foundation::SetHandleInformation` is unsafe and requires unsafe block
   --> src\launch\mod.rs:499:21
    |
499 |               let _ = SetHandleInformation(
    |  _____________________^
500 | |                 r_out,
501 | |                 HANDLE_FLAG_INHERIT.0,
502 | |                 windows::Win32::Foundation::HANDLE_FLAGS(0),
503 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Foundation::SetHandleInformation` is unsafe and requires unsafe block
   --> src\launch\mod.rs:504:21
    |
504 |               let _ = SetHandleInformation(
    |  _____________________^
505 | |                 r_err,
506 | |                 HANDLE_FLAG_INHERIT.0,
507 | |                 windows::Win32::Foundation::HANDLE_FLAGS(0),
508 | |             );
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `launch::AttributeContext::new` is unsafe and requires unsafe block
   --> src\launch\mod.rs:530:24
    |
530 |     let mut attr_ctx = AttributeContext::new(sec, handles_for_attr)?;
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::mem::zeroed` is unsafe and requires unsafe block
   --> src\launch\mod.rs:534:39
    |
534 |     let mut pi: PROCESS_INFORMATION = std::mem::zeroed();
    |                                       ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::System::Threading::CreateProcessW` is unsafe and requires unsafe block
   --> src\launch\mod.rs:557:14
    |
557 |       let ok = CreateProcessW(
    |  ______________^
558 | |         PCWSTR(exe_w.as_ptr()),
559 | |         args_w.as_mut().map(|v| PWSTR(v.as_mut_ptr())),
560 | |         None,
...   |
572 | |         &mut pi,
573 | |     )
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Foundation::CloseHandle` is unsafe and requires unsafe block
   --> src\launch\mod.rs:586:25
    |
586 |                 let _ = CloseHandle(child_stdin);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Foundation::CloseHandle` is unsafe and requires unsafe block
   --> src\launch\mod.rs:589:25
    |
589 |                 let _ = CloseHandle(child_stdout);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Foundation::CloseHandle` is unsafe and requires unsafe block
   --> src\launch\mod.rs:592:25
    |
592 |                 let _ = CloseHandle(child_stderr);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Foundation::CloseHandle` is unsafe and requires unsafe block
   --> src\launch\mod.rs:607:21
    |
607 |             let _ = CloseHandle(child_stdin);
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Foundation::CloseHandle` is unsafe and requires unsafe block
   --> src\launch\mod.rs:610:21
    |
610 |             let _ = CloseHandle(child_stdout);
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Foundation::CloseHandle` is unsafe and requires unsafe block
   --> src\launch\mod.rs:613:21
    |
613 |             let _ = CloseHandle(child_stderr);
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::System::JobObjects::CreateJobObjectW` is unsafe and requires unsafe block
   --> src\launch\mod.rs:620:20
    |
620 |         let hjob = CreateJobObjectW(None, PCWSTR::null())
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::mem::zeroed` is unsafe and requires unsafe block
   --> src\launch\mod.rs:623:66
    |
623 |             let mut info: JOBOBJECT_EXTENDED_LIMIT_INFORMATION = std::mem::zeroed();
    |                                                                  ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::System::JobObjects::SetInformationJobObject` is unsafe and requires unsafe block
   --> src\launch\mod.rs:631:13
    |
631 | /             SetInformationJobObject(
632 | |                 hjob,
633 | |                 JobObjectExtendedLimitInformation,
634 | |                 &info as *const _ as *const _,
635 | |                 std::mem::size_of::<JOBOBJECT_EXTENDED_LIMIT_INFORMATION>() as u32,
636 | |             )
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::mem::zeroed` is unsafe and requires unsafe block
   --> src\launch\mod.rs:644:68
    |
644 |             let mut info: JOBOBJECT_CPU_RATE_CONTROL_INFORMATION = std::mem::zeroed();
    |                                                                    ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::System::JobObjects::SetInformationJobObject` is unsafe and requires unsafe block
   --> src\launch\mod.rs:648:13
    |
648 | /             SetInformationJobObject(
649 | |                 hjob,
650 | |                 JobObjectCpuRateControlInformation,
651 | |                 &info as *const _ as *const _,
652 | |                 std::mem::size_of::<JOBOBJECT_CPU_RATE_CONTROL_INFORMATION>() as u32,
653 | |             )
    | |_____________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::System::JobObjects::AssignProcessToJobObject` is unsafe and requires unsafe block
   --> src\launch\mod.rs:660:9
    |
660 |         AssignProcessToJobObject(hjob, pi.hProcess).map_err(|_| AcError::LaunchFailed {
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Foundation::CloseHandle` is unsafe and requires unsafe block
   --> src\launch\mod.rs:668:21
    |
668 |             let _ = CloseHandle(hjob);
    |                     ^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Foundation::CloseHandle` is unsafe and requires unsafe block
   --> src\launch\mod.rs:672:13
    |
672 |     let _ = CloseHandle(pi.hThread);
    |             ^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Security::GetTokenInformation` is unsafe and requires unsafe block
  --> src\token.rs:84:11
   |
84 |       match GetTokenInformation(
   |  ___________^
85 | |         token,
86 | |         class,
87 | |         Some((&mut value) as *mut _ as *mut _),
88 | |         std::mem::size_of::<u32>() as u32,
89 | |         &mut retlen,
90 | |     ) {
   | |_____^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
  --> src\token.rs:81:1
   |
81 | unsafe fn query_bool(token: HANDLE, class: TOKEN_INFORMATION_CLASS) -> Result<bool> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `windows::Win32::Security::GetTokenInformation` is unsafe and requires unsafe block
   --> src\token.rs:108:23
    |
108 |     if let Err(err) = GetTokenInformation(token, TokenAppContainerSid, None, 0, &mut needed) {
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src\token.rs:106:1
    |
106 | unsafe fn query_appcontainer_sid(token: HANDLE) -> Result<Option<AppContainerSid>> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `windows::Win32::Security::GetTokenInformation` is unsafe and requires unsafe block
   --> src\token.rs:123:5
    |
123 | /     GetTokenInformation(
124 | |         token,
125 | |         TokenAppContainerSid,
126 | |         Some(buffer.as_mut_ptr() as *mut _),
127 | |         needed,
128 | |         &mut needed,
129 | |     )
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src\token.rs:138:15
    |
138 |     let sid = (*info_ptr).TokenAppContainer;
    |               ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `token::sid_to_string` is unsafe and requires unsafe block
   --> src\token.rs:142:22
    |
142 |     let sid_string = sid_to_string(sid)?;
    |                      ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Security::GetTokenInformation` is unsafe and requires unsafe block
   --> src\token.rs:149:23
    |
149 |     if let Err(err) = GetTokenInformation(token, TokenCapabilities, None, 0, &mut needed) {
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src\token.rs:147:1
    |
147 | unsafe fn query_capabilities(token: HANDLE) -> Result<Vec<String>> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `windows::Win32::Security::GetTokenInformation` is unsafe and requires unsafe block
   --> src\token.rs:164:5
    |
164 | /     GetTokenInformation(
165 | |         token,
166 | |         TokenCapabilities,
167 | |         Some(buffer.as_mut_ptr() as *mut _),
168 | |         needed,
169 | |         &mut needed,
170 | |     )
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src\token.rs:179:17
    |
179 |     let count = (*groups).GroupCount as usize;
    |                 ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::slice::from_raw_parts` is unsafe and requires unsafe block
   --> src\token.rs:184:17
    |
184 |     let slice = std::slice::from_raw_parts((*groups).Groups.as_ptr(), count);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src\token.rs:184:44
    |
184 |     let slice = std::slice::from_raw_parts((*groups).Groups.as_ptr(), count);
    |                                            ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `token::sid_to_string` is unsafe and requires unsafe block
   --> src\token.rs:189:23
    |
189 |         let sid_str = sid_to_string(entry.Sid)?;
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Security::Authorization::ConvertSidToStringSidW` is unsafe and requires unsafe block
   --> src\token.rs:203:5
    |
203 |     ConvertSidToStringSidW(psid, &mut out)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src\token.rs:196:1
    |
196 | unsafe fn sid_to_string(psid: windows::Win32::Security::PSID) -> Result<String> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `util::win::LocalFreeGuard::<T>::new` is unsafe and requires unsafe block
   --> src\token.rs:205:17
    |
205 |     let guard = LocalFreeGuard::<u16>::new(out.0);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src\util.rs:104:19
    |
104 |             while *self.ptr.add(len) != 0 {
    |                   ^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src\util.rs:99:9
    |
 99 |         pub unsafe fn to_string_lossy(&self) -> String {
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::add` is unsafe and requires unsafe block
   --> src\util.rs:104:20
    |
104 |             while *self.ptr.add(len) != 0 {
    |                    ^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::slice::from_raw_parts` is unsafe and requires unsafe block
   --> src\util.rs:107:25
    |
107 |             let slice = std::slice::from_raw_parts(self.ptr, len);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error: field `package_sid_guard` is never read
   --> src\launch\mod.rs:157:5
    |
152 | struct AttributeContext {
    |        ---------------- field in this struct
...
157 |     package_sid_guard: LocalFreeGuard<std::ffi::c_void>,
    |     ^^^^^^^^^^^^^^^^^
    |
    = note: `-D dead-code` implied by `-D warnings`
    = help: to override `-D warnings` add `#[allow(dead_code)]`

For more information about this error, try `rustc --explain E0133`.
error: could not compile `rappct` (lib) due to 55 previous errors
warning: build failed, waiting for other jobs to finish...
Error: The operation was canceled.
5s
Post job cleanup.
"C:\Program Files\Git\bin\git.exe" version
git version 2.51.0.windows.1
Temporarily overriding HOME='D:\a\_temp\ad6ab7fb-b5ab-4843-a786-4231a7deed3c' before making global git config changes
Adding repository directory to the temporary git global config as a safe directory
"C:\Program Files\Git\bin\git.exe" config --global --add safe.directory D:\a\rappct\rappct
"C:\Program Files\Git\bin\git.exe" config --local --name-only --get-regexp core\.sshCommand
"C:\Program Files\Git\bin\git.exe" submodule foreach --recursive "sh -c \"git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :\""
"C:\Program Files\Git\bin\git.exe" config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
http.https://github.com/.extraheader
"C:\Program Files\Git\bin\git.exe" config --local --unset-all http.https://github.com/.extraheader
"C:\Program Files\Git\bin\git.exe" submodule foreach --recursive "sh -c \"git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :\""
0s
Cleaning up orphan processes
Terminate orphan process: pid (7936) (vctip)