test-windows
cancelled now in 1m 40s
Search logs
1s
Current runner version: '2.328.0'
Runner Image Provisioner
Operating System
Runner Image
GITHUB_TOKEN Permissions
Secret source: Actions
Prepare workflow directory
Prepare all required actions
Getting action download info
Download action repository 'actions/checkout@v4' (SHA:08eba0b27e820071cde6df949e0beb9ba4906955)
Download action repository 'dtolnay/rust-toolchain@stable' (SHA:5d458579430fc14a04a08a1e7d3694f545e91ce6)
Complete job name: test-windows
6s
Run actions/checkout@v4
Syncing repository: cpjet64/rappct
Getting Git version info
Temporarily overriding HOME='D:\a\_temp\37700b67-4ea4-4276-9f8e-901e7f11f7de' before making global git config changes
Adding repository directory to the temporary git global config as a safe directory
"C:\Program Files\Git\bin\git.exe" config --global --add safe.directory D:\a\rappct\rappct
Deleting the contents of 'D:\a\rappct\rappct'
Initializing the repository
Disabling automatic garbage collection
Setting up auth
Fetching the repository
Determining the checkout info
"C:\Program Files\Git\bin\git.exe" sparse-checkout disable
"C:\Program Files\Git\bin\git.exe" config --local --unset-all extensions.worktreeConfig
Checking out the ref
"C:\Program Files\Git\bin\git.exe" log -1 --format=%H
eaa344f13e0eaf91b48836ee6b103e767a749ce2
15s
Run dtolnay/rust-toolchain@stable
Run : parse toolchain version
Run : construct rustup command line
Run : set $CARGO_HOME
Run : install rustup if needed on windows
Run rustup toolchain install stable --profile minimal --no-self-update
info: syncing channel updates for 'stable-x86_64-pc-windows-msvc'
info: latest update on 2025-09-18, rust version 1.90.0 (1159e78c4 2025-09-14)
info: downloading component 'cargo'
info: downloading component 'rust-std'
info: downloading component 'rustc'
info: installing component 'cargo'
info: installing component 'rust-std'
info: installing component 'rustc'

  stable-x86_64-pc-windows-msvc installed - rustc 1.90.0 (1159e78c4 2025-09-14)

Run rustup default stable
info: using existing install for 'stable-x86_64-pc-windows-msvc'
info: default toolchain set to 'stable-x86_64-pc-windows-msvc'

  stable-x86_64-pc-windows-msvc unchanged - rustc 1.90.0 (1159e78c4 2025-09-14)

Run : create cachekey
Run : disable incremental compilation
Run : enable colors in Cargo output
Run : enable Cargo sparse registry
Run : work around spurious network errors in curl 8.0
Run rustc +stable --version --verbose
rustc 1.90.0 (1159e78c4 2025-09-14)
binary: rustc
commit-hash: 1159e78c4747b02ef996e55082b704c09b970588
commit-date: 2025-09-14
host: x86_64-pc-windows-msvc
release: 1.90.0
LLVM version: 20.1.8
21s
Run rustc -Vv && cargo -V
rustc 1.90.0 (1159e78c4 2025-09-14)
binary: rustc
commit-hash: 1159e78c4747b02ef996e55082b704c09b970588
commit-date: 2025-09-14
host: x86_64-pc-windows-msvc
release: 1.90.0
LLVM version: 20.1.8
cargo 1.90.0 (840b83a10 2025-07-30)
49s
Run if [[ "" == "" ]]; then
    Updating crates.io index
 Downloading crates ...
  Downloaded serde_core v1.0.228
  Downloaded windows-targets v0.53.4
  Downloaded windows-result v0.3.4
  Downloaded windows-future v0.1.1
  Downloaded windows-core v0.60.1
  Downloaded serde v1.0.228
  Downloaded memchr v2.7.6
  Downloaded clap_derive v4.5.47
  Downloaded clap_builder v4.5.48
  Downloaded windows-strings v0.3.1
  Downloaded serde_json v1.0.145
  Downloaded getrandom v0.3.3
  Downloaded unicode-ident v1.0.19
  Downloaded tempfile v3.23.0
  Downloaded serde_derive v1.0.228
  Downloaded syn v2.0.106
  Downloaded clap_lex v0.7.5
  Downloaded anstyle-wincon v3.0.10
  Downloaded windows-numerics v0.1.1
  Downloaded windows-interface v0.59.2
  Downloaded utf8parse v0.2.2
  Downloaded thiserror-impl v1.0.69
  Downloaded thiserror v1.0.69
  Downloaded strsim v0.11.1
  Downloaded quote v1.0.41
  Downloaded once_cell_polyfill v1.70.1
  Downloaded itoa v1.0.15
  Downloaded is_terminal_polyfill v1.70.1
  Downloaded heck v0.5.0
  Downloaded colorchoice v1.0.4
  Downloaded clap v4.5.48
  Downloaded cfg-if v1.0.3
  Downloaded anstyle-parse v0.2.7
  Downloaded anstyle v1.0.11
  Downloaded anstream v0.6.20
  Downloaded windows-link v0.2.0
  Downloaded windows-link v0.1.3
  Downloaded windows-implement v0.59.0
  Downloaded windows-collections v0.1.1
  Downloaded ryu v1.0.20
  Downloaded proc-macro2 v1.0.101
  Downloaded once_cell v1.21.3
  Downloaded fastrand v2.3.0
  Downloaded windows_x86_64_msvc v0.53.0
  Downloaded anstyle-query v1.1.4
  Downloaded windows-sys v0.61.1
  Downloaded windows-sys v0.60.2
  Downloaded windows v0.60.0
   Compiling proc-macro2 v1.0.101
   Compiling unicode-ident v1.0.19
   Compiling quote v1.0.41
   Compiling windows_x86_64_msvc v0.53.0
   Compiling windows-link v0.1.3
   Compiling windows-targets v0.53.4
   Compiling windows-result v0.3.4
   Compiling syn v2.0.106
   Compiling windows-strings v0.3.1
   Compiling windows-sys v0.60.2
   Compiling serde_core v1.0.228
   Compiling anstyle v1.0.11
   Compiling once_cell_polyfill v1.70.1
   Compiling utf8parse v0.2.2
   Compiling anstyle-parse v0.2.7
   Compiling anstyle-wincon v3.0.10
   Compiling anstyle-query v1.1.4
   Compiling is_terminal_polyfill v1.70.1
   Compiling thiserror v1.0.69
   Compiling getrandom v0.3.3
   Compiling colorchoice v1.0.4
   Compiling anstream v0.6.20
   Compiling windows-interface v0.59.2
   Compiling windows-implement v0.59.0
   Compiling windows-core v0.60.1
   Compiling windows-numerics v0.1.1
   Compiling windows-collections v0.1.1
   Compiling windows-future v0.1.1
   Compiling thiserror-impl v1.0.69
   Compiling heck v0.5.0
   Compiling windows-link v0.2.0
   Compiling cfg-if v1.0.3
   Compiling serde v1.0.228
   Compiling clap_lex v0.7.5
   Compiling serde_json v1.0.145
   Compiling strsim v0.11.1
   Compiling clap_builder v4.5.48
   Compiling windows-sys v0.61.1
   Compiling clap_derive v4.5.47
   Compiling windows v0.60.0
   Compiling serde_derive v1.0.228
   Compiling fastrand v2.3.0
   Compiling itoa v1.0.15
   Compiling ryu v1.0.20
   Compiling once_cell v1.21.3
   Compiling memchr v2.7.6
   Compiling tempfile v3.23.0
   Compiling clap v4.5.48
   Compiling rappct v0.9.0 (D:\a\rappct\rappct)
error[E0133]: call to unsafe function `windows::Win32::Security::GetTokenInformation` is unsafe and requires unsafe block
  --> src\token.rs:84:11
   |
84 |       match GetTokenInformation(
   |  ___________^
85 | |         token,
86 | |         class,
87 | |         Some((&mut value) as *mut _ as *mut _),
88 | |         std::mem::size_of::<u32>() as u32,
89 | |         &mut retlen,
90 | |     ) {
   | |_____^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
  --> src\token.rs:81:1
   |
81 | unsafe fn query_bool(token: HANDLE, class: TOKEN_INFORMATION_CLASS) -> Result<bool> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = note: `-D unsafe-op-in-unsafe-fn` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(unsafe_op_in_unsafe_fn)]`
error[E0133]: call to unsafe function `windows::Win32::Security::GetTokenInformation` is unsafe and requires unsafe block
   --> src\token.rs:108:23
    |
108 |     if let Err(err) = GetTokenInformation(token, TokenAppContainerSid, None, 0, &mut needed) {
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src\token.rs:106:1
    |
106 | unsafe fn query_appcontainer_sid(token: HANDLE) -> Result<Option<AppContainerSid>> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
error[E0133]: call to unsafe function `windows::Win32::Security::GetTokenInformation` is unsafe and requires unsafe block
   --> src\token.rs:123:5
    |
123 | /     GetTokenInformation(
124 | |         token,
125 | |         TokenAppContainerSid,
126 | |         Some(buffer.as_mut_ptr() as *mut _),
127 | |         needed,
128 | |         &mut needed,
129 | |     )
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src\token.rs:138:15
    |
138 |     let sid = (*info_ptr).TokenAppContainer;
    |               ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
error[E0133]: call to unsafe function `token::sid_to_string` is unsafe and requires unsafe block
   --> src\token.rs:142:22
    |
142 |     let sid_string = sid_to_string(sid)?;
    |                      ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
error[E0133]: call to unsafe function `windows::Win32::Security::GetTokenInformation` is unsafe and requires unsafe block
   --> src\token.rs:149:23
    |
149 |     if let Err(err) = GetTokenInformation(token, TokenCapabilities, None, 0, &mut needed) {
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src\token.rs:147:1
    |
147 | unsafe fn query_capabilities(token: HANDLE) -> Result<Vec<String>> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
error[E0133]: call to unsafe function `windows::Win32::Security::GetTokenInformation` is unsafe and requires unsafe block
   --> src\token.rs:164:5
    |
164 | /     GetTokenInformation(
165 | |         token,
166 | |         TokenCapabilities,
167 | |         Some(buffer.as_mut_ptr() as *mut _),
168 | |         needed,
169 | |         &mut needed,
170 | |     )
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src\token.rs:179:17
    |
179 |     let count = (*groups).GroupCount as usize;
    |                 ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
error[E0133]: call to unsafe function `std::slice::from_raw_parts` is unsafe and requires unsafe block
   --> src\token.rs:184:17
    |
184 |     let slice = std::slice::from_raw_parts((*groups).Groups.as_ptr(), count);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src\token.rs:184:44
    |
184 |     let slice = std::slice::from_raw_parts((*groups).Groups.as_ptr(), count);
    |                                            ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
error[E0133]: call to unsafe function `token::sid_to_string` is unsafe and requires unsafe block
   --> src\token.rs:189:23
    |
189 |         let sid_str = sid_to_string(entry.Sid)?;
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
error[E0133]: call to unsafe function `windows::Win32::Security::Authorization::ConvertSidToStringSidW` is unsafe and requires unsafe block
   --> src\token.rs:203:5
    |
203 |     ConvertSidToStringSidW(psid, &mut out)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src\token.rs:196:1
    |
196 | unsafe fn sid_to_string(psid: windows::Win32::Security::PSID) -> Result<String> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
error[E0133]: call to unsafe function `util::win::LocalFreeGuard::<T>::new` is unsafe and requires unsafe block
   --> src\token.rs:205:17
    |
205 |     let guard = LocalFreeGuard::<u16>::new(out.0);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src\util.rs:104:19
    |
104 |             while *self.ptr.add(len) != 0 {
    |                   ^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src\util.rs:99:9
    |
 99 |         pub unsafe fn to_string_lossy(&self) -> String {
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::add` is unsafe and requires unsafe block
   --> src\util.rs:104:20
    |
104 |             while *self.ptr.add(len) != 0 {
    |                    ^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
error[E0133]: call to unsafe function `std::slice::from_raw_parts` is unsafe and requires unsafe block
   --> src\util.rs:107:25
    |
107 |             let slice = std::slice::from_raw_parts(self.ptr, len);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
For more information about this error, try `rustc --explain E0133`.
error: could not compile `rappct` (lib) due to 16 previous errors
warning: build failed, waiting for other jobs to finish...
Error: The operation was canceled.
5s
Post job cleanup.
"C:\Program Files\Git\bin\git.exe" version
git version 2.51.0.windows.1
Temporarily overriding HOME='D:\a\_temp\2b2a670a-a4ef-4d84-9995-e8ae19d8e21d' before making global git config changes
Adding repository directory to the temporary git global config as a safe directory
"C:\Program Files\Git\bin\git.exe" config --global --add safe.directory D:\a\rappct\rappct
"C:\Program Files\Git\bin\git.exe" config --local --name-only --get-regexp core\.sshCommand
"C:\Program Files\Git\bin\git.exe" submodule foreach --recursive "sh -c \"git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :\""
"C:\Program Files\Git\bin\git.exe" config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
http.https://github.com/.extraheader
"C:\Program Files\Git\bin\git.exe" config --local --unset-all http.https://github.com/.extraheader
"C:\Program Files\Git\bin\git.exe" submodule foreach --recursive "sh -c \"git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :\""
0s
Cleaning up orphan processes
Terminate orphan process: pid (2164) (vctip)



test-windows (introspection)
failed now in 1m 27s
Search logs
1s
Current runner version: '2.328.0'
Runner Image Provisioner
Operating System
Runner Image
GITHUB_TOKEN Permissions
Secret source: Actions
Prepare workflow directory
Prepare all required actions
Getting action download info
Download action repository 'actions/checkout@v4' (SHA:08eba0b27e820071cde6df949e0beb9ba4906955)
Download action repository 'dtolnay/rust-toolchain@stable' (SHA:5d458579430fc14a04a08a1e7d3694f545e91ce6)
Complete job name: test-windows (introspection)
6s
Run actions/checkout@v4
Syncing repository: cpjet64/rappct
Getting Git version info
Temporarily overriding HOME='D:\a\_temp\0ccb0e01-f6ee-4b0c-ad03-f9b6e4535374' before making global git config changes
Adding repository directory to the temporary git global config as a safe directory
"C:\Program Files\Git\bin\git.exe" config --global --add safe.directory D:\a\rappct\rappct
Deleting the contents of 'D:\a\rappct\rappct'
Initializing the repository
Disabling automatic garbage collection
Setting up auth
Fetching the repository
Determining the checkout info
"C:\Program Files\Git\bin\git.exe" sparse-checkout disable
"C:\Program Files\Git\bin\git.exe" config --local --unset-all extensions.worktreeConfig
Checking out the ref
"C:\Program Files\Git\bin\git.exe" log -1 --format=%H
eaa344f13e0eaf91b48836ee6b103e767a749ce2
15s
Run dtolnay/rust-toolchain@stable
Run : parse toolchain version
Run : construct rustup command line
Run : set $CARGO_HOME
Run : install rustup if needed on windows
Run rustup toolchain install stable --profile minimal --no-self-update
info: syncing channel updates for 'stable-x86_64-pc-windows-msvc'
info: latest update on 2025-09-18, rust version 1.90.0 (1159e78c4 2025-09-14)
info: downloading component 'cargo'
info: downloading component 'rust-std'
info: downloading component 'rustc'
info: installing component 'cargo'
info: installing component 'rust-std'
info: installing component 'rustc'

  stable-x86_64-pc-windows-msvc installed - rustc 1.90.0 (1159e78c4 2025-09-14)

Run rustup default stable
info: using existing install for 'stable-x86_64-pc-windows-msvc'
info: default toolchain set to 'stable-x86_64-pc-windows-msvc'

  stable-x86_64-pc-windows-msvc unchanged - rustc 1.90.0 (1159e78c4 2025-09-14)

Run : create cachekey
Run : disable incremental compilation
Run : enable colors in Cargo output
Run : enable Cargo sparse registry
Run : work around spurious network errors in curl 8.0
Run rustc +stable --version --verbose
rustc 1.90.0 (1159e78c4 2025-09-14)
binary: rustc
commit-hash: 1159e78c4747b02ef996e55082b704c09b970588
commit-date: 2025-09-14
host: x86_64-pc-windows-msvc
release: 1.90.0
LLVM version: 20.1.8
10s
Run rustc -Vv && cargo -V
rustc 1.90.0 (1159e78c4 2025-09-14)
binary: rustc
commit-hash: 1159e78c4747b02ef996e55082b704c09b970588
commit-date: 2025-09-14
host: x86_64-pc-windows-msvc
release: 1.90.0
LLVM version: 20.1.8
cargo 1.90.0 (840b83a10 2025-07-30)
48s
Run if [[ "introspection" == "" ]]; then
    Updating crates.io index
 Downloading crates ...
  Downloaded fastrand v2.3.0
  Downloaded windows-interface v0.59.2
  Downloaded windows-strings v0.3.1
  Downloaded windows-link v0.1.3
  Downloaded windows_x86_64_msvc v0.53.0
  Downloaded windows-targets v0.53.4
  Downloaded windows-result v0.3.4
  Downloaded windows-core v0.60.1
  Downloaded windows-link v0.2.0
  Downloaded thiserror-impl v1.0.69
  Downloaded quote v1.0.41
  Downloaded syn v2.0.106
  Downloaded memchr v2.7.6
  Downloaded proc-macro2 v1.0.101
  Downloaded getrandom v0.3.3
  Downloaded clap_derive v4.5.47
  Downloaded clap v4.5.48
  Downloaded cfg-if v1.0.3
  Downloaded windows-collections v0.1.1
  Downloaded utf8parse v0.2.2
  Downloaded once_cell v1.21.3
  Downloaded windows-numerics v0.1.1
  Downloaded strsim v0.11.1
  Downloaded clap_lex v0.7.5
  Downloaded windows-implement v0.59.0
  Downloaded thiserror v1.0.69
  Downloaded tempfile v3.23.0
  Downloaded serde_core v1.0.228
  Downloaded serde v1.0.228
  Downloaded colorchoice v1.0.4
  Downloaded anstyle-parse v0.2.7
  Downloaded anstyle v1.0.11
  Downloaded anstream v0.6.20
  Downloaded serde_derive v1.0.228
  Downloaded ryu v1.0.20
  Downloaded once_cell_polyfill v1.70.1
  Downloaded itoa v1.0.15
  Downloaded is_terminal_polyfill v1.70.1
  Downloaded anstyle-wincon v3.0.10
  Downloaded anstyle-query v1.1.4
  Downloaded windows-future v0.1.1
  Downloaded unicode-ident v1.0.19
  Downloaded heck v0.5.0
  Downloaded windows-sys v0.60.2
  Downloaded serde_json v1.0.145
  Downloaded clap_builder v4.5.48
  Downloaded windows-sys v0.61.1
  Downloaded windows v0.60.0
   Compiling proc-macro2 v1.0.101
   Compiling unicode-ident v1.0.19
   Compiling quote v1.0.41
   Compiling windows_x86_64_msvc v0.53.0
   Compiling windows-link v0.1.3
   Compiling windows-targets v0.53.4
   Compiling windows-strings v0.3.1
   Compiling windows-result v0.3.4
   Compiling syn v2.0.106
   Compiling windows-sys v0.60.2
   Compiling anstyle v1.0.11
   Compiling utf8parse v0.2.2
   Compiling serde_core v1.0.228
   Compiling once_cell_polyfill v1.70.1
   Compiling anstyle-wincon v3.0.10
   Compiling anstyle-parse v0.2.7
   Compiling anstyle-query v1.1.4
   Compiling thiserror v1.0.69
   Compiling is_terminal_polyfill v1.70.1
   Compiling colorchoice v1.0.4
   Compiling strsim v0.11.1
   Compiling getrandom v0.3.3
   Compiling anstream v0.6.20
   Compiling windows-interface v0.59.2
   Compiling windows-implement v0.59.0
   Compiling windows-core v0.60.1
   Compiling windows-future v0.1.1
   Compiling windows-collections v0.1.1
   Compiling windows-numerics v0.1.1
   Compiling thiserror-impl v1.0.69
   Compiling serde v1.0.228
   Compiling windows-link v0.2.0
   Compiling serde_json v1.0.145
   Compiling cfg-if v1.0.3
   Compiling clap_lex v0.7.5
   Compiling heck v0.5.0
   Compiling clap_derive v4.5.47
   Compiling clap_builder v4.5.48
   Compiling windows-sys v0.61.1
   Compiling windows v0.60.0
   Compiling serde_derive v1.0.228
   Compiling ryu v1.0.20
   Compiling once_cell v1.21.3
   Compiling itoa v1.0.15
   Compiling fastrand v2.3.0
   Compiling memchr v2.7.6
   Compiling tempfile v3.23.0
   Compiling clap v4.5.48
   Compiling rappct v0.9.0 (D:\a\rappct\rappct)
error[E0133]: call to unsafe function `windows::Win32::Security::GetTokenInformation` is unsafe and requires unsafe block
  --> src\token.rs:84:11
   |
84 |       match GetTokenInformation(
   |  ___________^
85 | |         token,
86 | |         class,
87 | |         Some((&mut value) as *mut _ as *mut _),
88 | |         std::mem::size_of::<u32>() as u32,
89 | |         &mut retlen,
90 | |     ) {
   | |_____^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
  --> src\token.rs:81:1
   |
81 | unsafe fn query_bool(token: HANDLE, class: TOKEN_INFORMATION_CLASS) -> Result<bool> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = note: `-D unsafe-op-in-unsafe-fn` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(unsafe_op_in_unsafe_fn)]`

error[E0133]: call to unsafe function `windows::Win32::Security::GetTokenInformation` is unsafe and requires unsafe block
   --> src\token.rs:108:23
    |
108 |     if let Err(err) = GetTokenInformation(token, TokenAppContainerSid, None, 0, &mut needed) {
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src\token.rs:106:1
    |
106 | unsafe fn query_appcontainer_sid(token: HANDLE) -> Result<Option<AppContainerSid>> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `windows::Win32::Security::GetTokenInformation` is unsafe and requires unsafe block
   --> src\token.rs:123:5
    |
123 | /     GetTokenInformation(
124 | |         token,
125 | |         TokenAppContainerSid,
126 | |         Some(buffer.as_mut_ptr() as *mut _),
127 | |         needed,
128 | |         &mut needed,
129 | |     )
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src\token.rs:138:15
    |
138 |     let sid = (*info_ptr).TokenAppContainer;
    |               ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `token::sid_to_string` is unsafe and requires unsafe block
   --> src\token.rs:142:22
    |
142 |     let sid_string = sid_to_string(sid)?;
    |                      ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Security::GetTokenInformation` is unsafe and requires unsafe block
   --> src\token.rs:149:23
    |
149 |     if let Err(err) = GetTokenInformation(token, TokenCapabilities, None, 0, &mut needed) {
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src\token.rs:147:1
    |
147 | unsafe fn query_capabilities(token: HANDLE) -> Result<Vec<String>> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `windows::Win32::Security::GetTokenInformation` is unsafe and requires unsafe block
   --> src\token.rs:164:5
    |
164 | /     GetTokenInformation(
165 | |         token,
166 | |         TokenCapabilities,
167 | |         Some(buffer.as_mut_ptr() as *mut _),
168 | |         needed,
169 | |         &mut needed,
170 | |     )
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src\token.rs:179:17
    |
179 |     let count = (*groups).GroupCount as usize;
    |                 ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::slice::from_raw_parts` is unsafe and requires unsafe block
   --> src\token.rs:184:17
    |
184 |     let slice = std::slice::from_raw_parts((*groups).Groups.as_ptr(), count);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src\token.rs:184:44
    |
184 |     let slice = std::slice::from_raw_parts((*groups).Groups.as_ptr(), count);
    |                                            ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `token::sid_to_string` is unsafe and requires unsafe block
   --> src\token.rs:189:23
    |
189 |         let sid_str = sid_to_string(entry.Sid)?;
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Security::Authorization::ConvertSidToStringSidW` is unsafe and requires unsafe block
   --> src\token.rs:203:5
    |
203 |     ConvertSidToStringSidW(psid, &mut out)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src\token.rs:196:1
    |
196 | unsafe fn sid_to_string(psid: windows::Win32::Security::PSID) -> Result<String> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `util::win::LocalFreeGuard::<T>::new` is unsafe and requires unsafe block
   --> src\token.rs:205:17
    |
205 |     let guard = LocalFreeGuard::<u16>::new(out.0);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src\util.rs:104:19
    |
104 |             while *self.ptr.add(len) != 0 {
    |                   ^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src\util.rs:99:9
    |
 99 |         pub unsafe fn to_string_lossy(&self) -> String {
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::add` is unsafe and requires unsafe block
   --> src\util.rs:104:20
    |
104 |             while *self.ptr.add(len) != 0 {
    |                    ^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::slice::from_raw_parts` is unsafe and requires unsafe block
   --> src\util.rs:107:25
    |
107 |             let slice = std::slice::from_raw_parts(self.ptr, len);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

For more information about this error, try `rustc --explain E0133`.
error: could not compile `rappct` (lib) due to 16 previous errors
warning: build failed, waiting for other jobs to finish...
Error: Process completed with exit code 101.
3s
Post job cleanup.
"C:\Program Files\Git\bin\git.exe" version
git version 2.51.0.windows.1
Temporarily overriding HOME='D:\a\_temp\fd0f681b-9b75-4a03-988e-7fc53eefb327' before making global git config changes
Adding repository directory to the temporary git global config as a safe directory
"C:\Program Files\Git\bin\git.exe" config --global --add safe.directory D:\a\rappct\rappct
"C:\Program Files\Git\bin\git.exe" config --local --name-only --get-regexp core\.sshCommand
"C:\Program Files\Git\bin\git.exe" submodule foreach --recursive "sh -c \"git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :\""
"C:\Program Files\Git\bin\git.exe" config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
http.https://github.com/.extraheader
"C:\Program Files\Git\bin\git.exe" config --local --unset-all http.https://github.com/.extraheader
"C:\Program Files\Git\bin\git.exe" submodule foreach --recursive "sh -c \"git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :\""
0s
Cleaning up orphan processes
Terminate orphan process: pid (1232) (vctip)



test-windows (net)
cancelled now in 1m 41s
Search logs
1s
Current runner version: '2.328.0'
Runner Image Provisioner
Operating System
Runner Image
GITHUB_TOKEN Permissions
Secret source: Actions
Prepare workflow directory
Prepare all required actions
Getting action download info
Download action repository 'actions/checkout@v4' (SHA:08eba0b27e820071cde6df949e0beb9ba4906955)
Download action repository 'dtolnay/rust-toolchain@stable' (SHA:5d458579430fc14a04a08a1e7d3694f545e91ce6)
Complete job name: test-windows (net)
10s
Run actions/checkout@v4
Syncing repository: cpjet64/rappct
Getting Git version info
Temporarily overriding HOME='D:\a\_temp\af51780b-7905-4006-97e3-c81050454707' before making global git config changes
Adding repository directory to the temporary git global config as a safe directory
"C:\Program Files\Git\bin\git.exe" config --global --add safe.directory D:\a\rappct\rappct
Deleting the contents of 'D:\a\rappct\rappct'
Initializing the repository
Disabling automatic garbage collection
Setting up auth
Fetching the repository
Determining the checkout info
"C:\Program Files\Git\bin\git.exe" sparse-checkout disable
"C:\Program Files\Git\bin\git.exe" config --local --unset-all extensions.worktreeConfig
Checking out the ref
"C:\Program Files\Git\bin\git.exe" log -1 --format=%H
eaa344f13e0eaf91b48836ee6b103e767a749ce2
19s
Run dtolnay/rust-toolchain@stable
Run : parse toolchain version
Run : construct rustup command line
Run : set $CARGO_HOME
Run : install rustup if needed on windows
Run rustup toolchain install stable --profile minimal --no-self-update
info: syncing channel updates for 'stable-x86_64-pc-windows-msvc'
info: latest update on 2025-09-18, rust version 1.90.0 (1159e78c4 2025-09-14)
info: downloading component 'cargo'
info: downloading component 'rust-std'
info: downloading component 'rustc'
info: installing component 'cargo'
info: installing component 'rust-std'
info: installing component 'rustc'

  stable-x86_64-pc-windows-msvc installed - rustc 1.90.0 (1159e78c4 2025-09-14)

Run rustup default stable
info: using existing install for 'stable-x86_64-pc-windows-msvc'
info: default toolchain set to 'stable-x86_64-pc-windows-msvc'

  stable-x86_64-pc-windows-msvc unchanged - rustc 1.90.0 (1159e78c4 2025-09-14)

Run : create cachekey
Run : disable incremental compilation
Run : enable colors in Cargo output
Run : enable Cargo sparse registry
Run : work around spurious network errors in curl 8.0
Run rustc +stable --version --verbose
rustc 1.90.0 (1159e78c4 2025-09-14)
binary: rustc
commit-hash: 1159e78c4747b02ef996e55082b704c09b970588
commit-date: 2025-09-14
host: x86_64-pc-windows-msvc
release: 1.90.0
LLVM version: 20.1.8
18s
Run rustc -Vv && cargo -V
rustc 1.90.0 (1159e78c4 2025-09-14)
binary: rustc
commit-hash: 1159e78c4747b02ef996e55082b704c09b970588
commit-date: 2025-09-14
host: x86_64-pc-windows-msvc
release: 1.90.0
LLVM version: 20.1.8
cargo 1.90.0 (840b83a10 2025-07-30)
44s
Run if [[ "net" == "" ]]; then
    Updating crates.io index
 Downloading crates ...
  Downloaded utf8parse v0.2.2
  Downloaded windows-numerics v0.1.1
  Downloaded tempfile v3.23.0
  Downloaded windows-result v0.3.4
  Downloaded windows-targets v0.53.4
  Downloaded windows-implement v0.59.0
  Downloaded windows-strings v0.3.1
  Downloaded serde_derive v1.0.228
  Downloaded serde v1.0.228
  Downloaded serde_json v1.0.145
  Downloaded memchr v2.7.6
  Downloaded syn v2.0.106
  Downloaded getrandom v0.3.3
  Downloaded proc-macro2 v1.0.101
  Downloaded windows-core v0.60.1
  Downloaded windows-collections v0.1.1
  Downloaded thiserror v1.0.69
  Downloaded strsim v0.11.1
  Downloaded once_cell_polyfill v1.70.1
  Downloaded itoa v1.0.15
  Downloaded heck v0.5.0
  Downloaded colorchoice v1.0.4
  Downloaded clap_builder v4.5.48
  Downloaded cfg-if v1.0.3
  Downloaded windows-interface v0.59.2
  Downloaded unicode-ident v1.0.19
  Downloaded quote v1.0.41
  Downloaded fastrand v2.3.0
  Downloaded anstyle-wincon v3.0.10
  Downloaded windows-link v0.2.0
  Downloaded windows-link v0.1.3
  Downloaded windows-future v0.1.1
  Downloaded thiserror-impl v1.0.69
  Downloaded serde_core v1.0.228
  Downloaded clap v4.5.48
  Downloaded anstyle-query v1.1.4
  Downloaded is_terminal_polyfill v1.70.1
  Downloaded anstyle v1.0.11
  Downloaded anstream v0.6.20
  Downloaded ryu v1.0.20
  Downloaded once_cell v1.21.3
  Downloaded clap_lex v0.7.5
  Downloaded clap_derive v4.5.47
  Downloaded anstyle-parse v0.2.7
  Downloaded windows_x86_64_msvc v0.53.0
  Downloaded windows-sys v0.60.2
  Downloaded windows-sys v0.61.1
  Downloaded windows v0.60.0
   Compiling proc-macro2 v1.0.101
   Compiling unicode-ident v1.0.19
   Compiling quote v1.0.41
   Compiling windows_x86_64_msvc v0.53.0
   Compiling windows-link v0.1.3
   Compiling windows-targets v0.53.4
   Compiling windows-strings v0.3.1
   Compiling windows-result v0.3.4
   Compiling syn v2.0.106
   Compiling windows-sys v0.60.2
   Compiling utf8parse v0.2.2
   Compiling serde_core v1.0.228
   Compiling anstyle v1.0.11
   Compiling once_cell_polyfill v1.70.1
   Compiling anstyle-wincon v3.0.10
   Compiling anstyle-parse v0.2.7
   Compiling anstyle-query v1.1.4
   Compiling thiserror v1.0.69
   Compiling is_terminal_polyfill v1.70.1
   Compiling getrandom v0.3.3
   Compiling colorchoice v1.0.4
   Compiling anstream v0.6.20
   Compiling windows-interface v0.59.2
   Compiling windows-implement v0.59.0
   Compiling windows-core v0.60.1
   Compiling windows-numerics v0.1.1
   Compiling windows-collections v0.1.1
   Compiling windows-future v0.1.1
   Compiling thiserror-impl v1.0.69
   Compiling serde_json v1.0.145
   Compiling heck v0.5.0
   Compiling serde v1.0.228
   Compiling windows-link v0.2.0
   Compiling cfg-if v1.0.3
   Compiling clap_lex v0.7.5
   Compiling strsim v0.11.1
   Compiling clap_builder v4.5.48
   Compiling windows-sys v0.61.1
   Compiling clap_derive v4.5.47
   Compiling windows v0.60.0
   Compiling serde_derive v1.0.228
Error: The operation was canceled.
5s
Post job cleanup.
"C:\Program Files\Git\bin\git.exe" version
git version 2.51.0.windows.1
Temporarily overriding HOME='D:\a\_temp\4fdcd245-66a2-4b59-a959-85df2b27b485' before making global git config changes
Adding repository directory to the temporary git global config as a safe directory
"C:\Program Files\Git\bin\git.exe" config --global --add safe.directory D:\a\rappct\rappct
"C:\Program Files\Git\bin\git.exe" config --local --name-only --get-regexp core\.sshCommand
"C:\Program Files\Git\bin\git.exe" submodule foreach --recursive "sh -c \"git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :\""
"C:\Program Files\Git\bin\git.exe" config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
http.https://github.com/.extraheader
"C:\Program Files\Git\bin\git.exe" config --local --unset-all http.https://github.com/.extraheader
"C:\Program Files\Git\bin\git.exe" submodule foreach --recursive "sh -c \"git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :\""
0s
Cleaning up orphan processes



test-windows (introspection,net)
cancelled now in 1m 36s
Search logs
1s
Current runner version: '2.328.0'
Runner Image Provisioner
Operating System
Runner Image
GITHUB_TOKEN Permissions
Secret source: Actions
Prepare workflow directory
Prepare all required actions
Getting action download info
Download action repository 'actions/checkout@v4' (SHA:08eba0b27e820071cde6df949e0beb9ba4906955)
Download action repository 'dtolnay/rust-toolchain@stable' (SHA:5d458579430fc14a04a08a1e7d3694f545e91ce6)
Complete job name: test-windows (introspection,net)
6s
Run actions/checkout@v4
Syncing repository: cpjet64/rappct
Getting Git version info
Temporarily overriding HOME='D:\a\_temp\eacf3f60-bfca-4805-a9a4-d1cc8302893e' before making global git config changes
Adding repository directory to the temporary git global config as a safe directory
"C:\Program Files\Git\bin\git.exe" config --global --add safe.directory D:\a\rappct\rappct
Deleting the contents of 'D:\a\rappct\rappct'
Initializing the repository
Disabling automatic garbage collection
Setting up auth
Fetching the repository
Determining the checkout info
"C:\Program Files\Git\bin\git.exe" sparse-checkout disable
"C:\Program Files\Git\bin\git.exe" config --local --unset-all extensions.worktreeConfig
Checking out the ref
"C:\Program Files\Git\bin\git.exe" log -1 --format=%H
eaa344f13e0eaf91b48836ee6b103e767a749ce2
17s
Run dtolnay/rust-toolchain@stable
Run : parse toolchain version
Run : construct rustup command line
Run : set $CARGO_HOME
Run : install rustup if needed on windows
Run rustup toolchain install stable --profile minimal --no-self-update
info: syncing channel updates for 'stable-x86_64-pc-windows-msvc'
info: latest update on 2025-09-18, rust version 1.90.0 (1159e78c4 2025-09-14)
info: downloading component 'cargo'
info: downloading component 'rust-std'
info: downloading component 'rustc'
info: installing component 'cargo'
info: installing component 'rust-std'
info: installing component 'rustc'

  stable-x86_64-pc-windows-msvc installed - rustc 1.90.0 (1159e78c4 2025-09-14)

Run rustup default stable
info: using existing install for 'stable-x86_64-pc-windows-msvc'
info: default toolchain set to 'stable-x86_64-pc-windows-msvc'

  stable-x86_64-pc-windows-msvc unchanged - rustc 1.90.0 (1159e78c4 2025-09-14)

Run : create cachekey
Run : disable incremental compilation
Run : enable colors in Cargo output
Run : enable Cargo sparse registry
Run : work around spurious network errors in curl 8.0
Run rustc +stable --version --verbose
rustc 1.90.0 (1159e78c4 2025-09-14)
binary: rustc
commit-hash: 1159e78c4747b02ef996e55082b704c09b970588
commit-date: 2025-09-14
host: x86_64-pc-windows-msvc
release: 1.90.0
LLVM version: 20.1.8
13s
Run rustc -Vv && cargo -V
rustc 1.90.0 (1159e78c4 2025-09-14)
binary: rustc
commit-hash: 1159e78c4747b02ef996e55082b704c09b970588
commit-date: 2025-09-14
host: x86_64-pc-windows-msvc
release: 1.90.0
LLVM version: 20.1.8
cargo 1.90.0 (840b83a10 2025-07-30)
50s
Run if [[ "introspection,net" == "" ]]; then
    Updating crates.io index
 Downloading crates ...
  Downloaded tempfile v3.23.0
  Downloaded windows-link v0.2.0
  Downloaded windows-targets v0.53.4
  Downloaded windows-strings v0.3.1
  Downloaded windows-core v0.60.1
  Downloaded unicode-ident v1.0.19
  Downloaded ryu v1.0.20
  Downloaded clap_builder v4.5.48
  Downloaded clap v4.5.48
  Downloaded anstyle-parse v0.2.7
  Downloaded thiserror-impl v1.0.69
  Downloaded serde v1.0.228
  Downloaded once_cell v1.21.3
  Downloaded memchr v2.7.6
  Downloaded colorchoice v1.0.4
  Downloaded anstyle-wincon v3.0.10
  Downloaded serde_json v1.0.145
  Downloaded anstyle-query v1.1.4
  Downloaded windows-result v0.3.4
  Downloaded windows-numerics v0.1.1
  Downloaded windows-interface v0.59.2
  Downloaded windows-future v0.1.1
  Downloaded windows-collections v0.1.1
  Downloaded syn v2.0.106
  Downloaded thiserror v1.0.69
  Downloaded serde_core v1.0.228
  Downloaded proc-macro2 v1.0.101
  Downloaded heck v0.5.0
  Downloaded fastrand v2.3.0
  Downloaded cfg-if v1.0.3
  Downloaded anstyle v1.0.11
  Downloaded windows-link v0.1.3
  Downloaded utf8parse v0.2.2
  Downloaded strsim v0.11.1
  Downloaded serde_derive v1.0.228
  Downloaded quote v1.0.41
  Downloaded once_cell_polyfill v1.70.1
  Downloaded itoa v1.0.15
  Downloaded getrandom v0.3.3
  Downloaded windows_x86_64_msvc v0.53.0
  Downloaded anstream v0.6.20
  Downloaded windows-implement v0.59.0
  Downloaded is_terminal_polyfill v1.70.1
  Downloaded clap_lex v0.7.5
  Downloaded clap_derive v4.5.47
  Downloaded windows-sys v0.61.1
  Downloaded windows-sys v0.60.2
  Downloaded windows v0.60.0
   Compiling proc-macro2 v1.0.101
   Compiling unicode-ident v1.0.19
   Compiling quote v1.0.41
   Compiling windows_x86_64_msvc v0.53.0
   Compiling windows-link v0.1.3
   Compiling windows-targets v0.53.4
   Compiling windows-strings v0.3.1
   Compiling windows-result v0.3.4
   Compiling syn v2.0.106
   Compiling windows-sys v0.60.2
   Compiling utf8parse v0.2.2
   Compiling anstyle v1.0.11
   Compiling serde_core v1.0.228
   Compiling once_cell_polyfill v1.70.1
   Compiling anstyle-wincon v3.0.10
   Compiling anstyle-parse v0.2.7
   Compiling anstyle-query v1.1.4
   Compiling colorchoice v1.0.4
   Compiling thiserror v1.0.69
   Compiling getrandom v0.3.3
   Compiling is_terminal_polyfill v1.70.1
   Compiling strsim v0.11.1
   Compiling anstream v0.6.20
   Compiling windows-interface v0.59.2
   Compiling windows-implement v0.59.0
   Compiling windows-core v0.60.1
   Compiling windows-future v0.1.1
   Compiling windows-numerics v0.1.1
   Compiling windows-collections v0.1.1
   Compiling thiserror-impl v1.0.69
   Compiling cfg-if v1.0.3
   Compiling serde v1.0.228
   Compiling windows-link v0.2.0
   Compiling serde_json v1.0.145
   Compiling clap_lex v0.7.5
   Compiling heck v0.5.0
   Compiling clap_derive v4.5.47
   Compiling clap_builder v4.5.48
   Compiling windows-sys v0.61.1
   Compiling windows v0.60.0
   Compiling serde_derive v1.0.228
   Compiling memchr v2.7.6
   Compiling itoa v1.0.15
   Compiling ryu v1.0.20
   Compiling once_cell v1.21.3
   Compiling fastrand v2.3.0
   Compiling tempfile v3.23.0
   Compiling clap v4.5.48
   Compiling rappct v0.9.0 (D:\a\rappct\rappct)
error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src\net.rs:23:11
   |
23 |     while *ptr.0.add(len) != 0 {
   |           ^^^^^^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
  --> src\net.rs:18:1
   |
18 | unsafe fn pwstr_to_string(ptr: PWSTR) -> String {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = note: `-D unsafe-op-in-unsafe-fn` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(unsafe_op_in_unsafe_fn)]`

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::add` is unsafe and requires unsafe block
  --> src\net.rs:23:12
   |
23 |     while *ptr.0.add(len) != 0 {
   |            ^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::slice::from_raw_parts` is unsafe and requires unsafe block
  --> src\net.rs:26:30
   |
26 |     String::from_utf16_lossy(std::slice::from_raw_parts(ptr.0, len))
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Security::Authorization::ConvertSidToStringSidW` is unsafe and requires unsafe block
  --> src\net.rs:33:5
   |
33 |     ConvertSidToStringSidW(psid, &mut raw)
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
  --> src\net.rs:30:1
   |
30 | unsafe fn psid_to_string(psid: PSID) -> Result<String> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `util::win::LocalFreeGuard::<T>::new` is unsafe and requires unsafe block
  --> src\net.rs:35:17
   |
35 |     let guard = LocalFreeGuard::<u16>::new(raw.0);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::NetworkManagement::WindowsFirewall::NetworkIsolationGetAppContainerConfig` is unsafe and requires unsafe block
   --> src\net.rs:227:15
    |
227 |     let err = NetworkIsolationGetAppContainerConfig(&mut cur_count, &mut cur_arr);
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src\net.rs:217:1
    |
217 | unsafe fn set_loopback(allow: bool, sid: &AppContainerSid) -> Result<()> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `util::win::LocalFreeGuard::<T>::new` is unsafe and requires unsafe block
   --> src\net.rs:234:14
    |
234 |         Some(LocalFreeGuard::<SID_AND_ATTRIBUTES>::new(cur_arr))
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::slice::from_raw_parts` is unsafe and requires unsafe block
   --> src\net.rs:239:9
    |
239 | /         std::slice::from_raw_parts(
240 | |             guard.as_ptr() as *const SID_AND_ATTRIBUTES,
241 | |             cur_count as usize,
242 | |         )
    | |_________^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Security::Authorization::ConvertStringSidToSidW` is unsafe and requires unsafe block
   --> src\net.rs:250:5
    |
250 |     ConvertStringSidToSidW(PCWSTR(sddl_w.as_ptr()), &mut psid_raw)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `util::win::LocalFreeGuard::<T>::new` is unsafe and requires unsafe block
   --> src\net.rs:252:22
    |
252 |     let psid_guard = LocalFreeGuard::<std::ffi::c_void>::new(psid_raw.0);
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Security::EqualSid` is unsafe and requires unsafe block
   --> src\net.rs:258:16
    |
258 |             if EqualSid(sa.Sid, target).is_ok() {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Security::EqualSid` is unsafe and requires unsafe block
   --> src\net.rs:270:26
    |
270 |         vec.retain(|sa| !EqualSid(sa.Sid, target).is_ok());
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::NetworkManagement::WindowsFirewall::NetworkIsolationSetAppContainerConfig` is unsafe and requires unsafe block
   --> src\net.rs:273:16
    |
273 |     let err2 = NetworkIsolationSetAppContainerConfig(&vec);
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Security::GetTokenInformation` is unsafe and requires unsafe block
  --> src\token.rs:84:11
   |
84 |       match GetTokenInformation(
   |  ___________^
85 | |         token,
86 | |         class,
87 | |         Some((&mut value) as *mut _ as *mut _),
88 | |         std::mem::size_of::<u32>() as u32,
89 | |         &mut retlen,
90 | |     ) {
   | |_____^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
  --> src\token.rs:81:1
   |
81 | unsafe fn query_bool(token: HANDLE, class: TOKEN_INFORMATION_CLASS) -> Result<bool> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `windows::Win32::Security::GetTokenInformation` is unsafe and requires unsafe block
   --> src\token.rs:108:23
    |
108 |     if let Err(err) = GetTokenInformation(token, TokenAppContainerSid, None, 0, &mut needed) {
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src\token.rs:106:1
    |
106 | unsafe fn query_appcontainer_sid(token: HANDLE) -> Result<Option<AppContainerSid>> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `windows::Win32::Security::GetTokenInformation` is unsafe and requires unsafe block
   --> src\token.rs:123:5
    |
123 | /     GetTokenInformation(
124 | |         token,
125 | |         TokenAppContainerSid,
126 | |         Some(buffer.as_mut_ptr() as *mut _),
127 | |         needed,
128 | |         &mut needed,
129 | |     )
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src\token.rs:138:15
    |
138 |     let sid = (*info_ptr).TokenAppContainer;
    |               ^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `token::sid_to_string` is unsafe and requires unsafe block
   --> src\token.rs:142:22
    |
142 |     let sid_string = sid_to_string(sid)?;
    |                      ^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Security::GetTokenInformation` is unsafe and requires unsafe block
   --> src\token.rs:149:23
    |
149 |     if let Err(err) = GetTokenInformation(token, TokenCapabilities, None, 0, &mut needed) {
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src\token.rs:147:1
    |
147 | unsafe fn query_capabilities(token: HANDLE) -> Result<Vec<String>> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `windows::Win32::Security::GetTokenInformation` is unsafe and requires unsafe block
   --> src\token.rs:164:5
    |
164 | /     GetTokenInformation(
165 | |         token,
166 | |         TokenCapabilities,
167 | |         Some(buffer.as_mut_ptr() as *mut _),
168 | |         needed,
169 | |         &mut needed,
170 | |     )
    | |_____^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src\token.rs:179:17
    |
179 |     let count = (*groups).GroupCount as usize;
    |                 ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `std::slice::from_raw_parts` is unsafe and requires unsafe block
   --> src\token.rs:184:17
    |
184 |     let slice = std::slice::from_raw_parts((*groups).Groups.as_ptr(), count);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src\token.rs:184:44
    |
184 |     let slice = std::slice::from_raw_parts((*groups).Groups.as_ptr(), count);
    |                                            ^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error[E0133]: call to unsafe function `token::sid_to_string` is unsafe and requires unsafe block
   --> src\token.rs:189:23
    |
189 |         let sid_str = sid_to_string(entry.Sid)?;
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `windows::Win32::Security::Authorization::ConvertSidToStringSidW` is unsafe and requires unsafe block
   --> src\token.rs:203:5
    |
203 |     ConvertSidToStringSidW(psid, &mut out)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src\token.rs:196:1
    |
196 | unsafe fn sid_to_string(psid: windows::Win32::Security::PSID) -> Result<String> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `util::win::LocalFreeGuard::<T>::new` is unsafe and requires unsafe block
   --> src\token.rs:205:17
    |
205 |     let guard = LocalFreeGuard::<u16>::new(out.0);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: dereference of raw pointer is unsafe and requires unsafe block
   --> src\util.rs:104:19
    |
104 |             while *self.ptr.add(len) != 0 {
    |                   ^^^^^^^^^^^^^^^^^^ dereference of raw pointer
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
   --> src\util.rs:99:9
    |
 99 |         pub unsafe fn to_string_lossy(&self) -> String {
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::add` is unsafe and requires unsafe block
   --> src\util.rs:104:20
    |
104 |             while *self.ptr.add(len) != 0 {
    |                    ^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0133]: call to unsafe function `std::slice::from_raw_parts` is unsafe and requires unsafe block
   --> src\util.rs:107:25
    |
107 |             let slice = std::slice::from_raw_parts(self.ptr, len);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
    = note: consult the function's documentation for information on how to avoid undefined behavior

For more information about this error, try `rustc --explain E0133`.
error: could not compile `rappct` (lib) due to 29 previous errors
warning: build failed, waiting for other jobs to finish...
Error: The operation was canceled.
6s
Post job cleanup.
"C:\Program Files\Git\bin\git.exe" version
git version 2.51.0.windows.1
Temporarily overriding HOME='D:\a\_temp\bb56581a-2aa0-4121-9da9-c128bc391950' before making global git config changes
Adding repository directory to the temporary git global config as a safe directory
"C:\Program Files\Git\bin\git.exe" config --global --add safe.directory D:\a\rappct\rappct
"C:\Program Files\Git\bin\git.exe" config --local --name-only --get-regexp core\.sshCommand
"C:\Program Files\Git\bin\git.exe" submodule foreach --recursive "sh -c \"git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :\""
"C:\Program Files\Git\bin\git.exe" config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
http.https://github.com/.extraheader
"C:\Program Files\Git\bin\git.exe" config --local --unset-all http.https://github.com/.extraheader
"C:\Program Files\Git\bin\git.exe" submodule foreach --recursive "sh -c \"git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :\""
0s
Cleaning up orphan processes
Terminate orphan process: pid (3872) (vctip)